error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise
  --> $DIR/unwrap_used.rs:35:17
   |
LL |         let _ = boxed_slice.get(1).unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&boxed_slice[1]`
   |
note: the lint level is defined here
  --> $DIR/unwrap_used.rs:5:9
   |
LL | #![deny(clippy::get_unwrap)]
   |         ^^^^^^^^^^^^^^^^^^

error: used `unwrap()` on `an Option` value
  --> $DIR/unwrap_used.rs:35:17
   |
LL |         let _ = boxed_slice.get(1).unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `-D clippy::unwrap-used` implied by `-D warnings`
   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message

error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise
  --> $DIR/unwrap_used.rs:36:17
   |
LL |         let _ = some_slice.get(0).unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_slice[0]`

error: used `unwrap()` on `an Option` value
  --> $DIR/unwrap_used.rs:36:17
   |
LL |         let _ = some_slice.get(0).unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message

error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise
  --> $DIR/unwrap_used.rs:37:17
   |
LL |         let _ = some_vec.get(0).unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vec[0]`

error: used `unwrap()` on `an Option` value
  --> $DIR/unwrap_used.rs:37:17
   |
LL |         let _ = some_vec.get(0).unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message

error: called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more concise
  --> $DIR/unwrap_used.rs:38:17
   |
LL |         let _ = some_vecdeque.get(0).unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vecdeque[0]`

error: used `unwrap()` on `an Option` value
  --> $DIR/unwrap_used.rs:38:17
   |
LL |         let _ = some_vecdeque.get(0).unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message

error: called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise
  --> $DIR/unwrap_used.rs:39:17
   |
LL |         let _ = some_hashmap.get(&1).unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_hashmap[&1]`

error: used `unwrap()` on `an Option` value
  --> $DIR/unwrap_used.rs:39:17
   |
LL |         let _ = some_hashmap.get(&1).unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message

error: called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise
  --> $DIR/unwrap_used.rs:40:17
   |
LL |         let _ = some_btreemap.get(&1).unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_btreemap[&1]`

error: used `unwrap()` on `an Option` value
  --> $DIR/unwrap_used.rs:40:17
   |
LL |         let _ = some_btreemap.get(&1).unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message

error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise
  --> $DIR/unwrap_used.rs:44:21
   |
LL |         let _: u8 = *boxed_slice.get(1).unwrap();
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `boxed_slice[1]`

error: used `unwrap()` on `an Option` value
  --> $DIR/unwrap_used.rs:44:22
   |
LL |         let _: u8 = *boxed_slice.get(1).unwrap();
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message

error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise
  --> $DIR/unwrap_used.rs:49:9
   |
LL |         *boxed_slice.get_mut(0).unwrap() = 1;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `boxed_slice[0]`

error: used `unwrap()` on `an Option` value
  --> $DIR/unwrap_used.rs:49:10
   |
LL |         *boxed_slice.get_mut(0).unwrap() = 1;
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message

error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise
  --> $DIR/unwrap_used.rs:50:9
   |
LL |         *some_slice.get_mut(0).unwrap() = 1;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_slice[0]`

error: used `unwrap()` on `an Option` value
  --> $DIR/unwrap_used.rs:50:10
   |
LL |         *some_slice.get_mut(0).unwrap() = 1;
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message

error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise
  --> $DIR/unwrap_used.rs:51:9
   |
LL |         *some_vec.get_mut(0).unwrap() = 1;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0]`

error: used `unwrap()` on `an Option` value
  --> $DIR/unwrap_used.rs:51:10
   |
LL |         *some_vec.get_mut(0).unwrap() = 1;
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message

error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise
  --> $DIR/unwrap_used.rs:52:9
   |
LL |         *some_vecdeque.get_mut(0).unwrap() = 1;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vecdeque[0]`

error: used `unwrap()` on `an Option` value
  --> $DIR/unwrap_used.rs:52:10
   |
LL |         *some_vecdeque.get_mut(0).unwrap() = 1;
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message

error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise
  --> $DIR/unwrap_used.rs:64:17
   |
LL |         let _ = some_vec.get(0..1).unwrap().to_vec();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`

error: used `unwrap()` on `an Option` value
  --> $DIR/unwrap_used.rs:64:17
   |
LL |         let _ = some_vec.get(0..1).unwrap().to_vec();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message

error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise
  --> $DIR/unwrap_used.rs:65:17
   |
LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`

error: used `unwrap()` on `an Option` value
  --> $DIR/unwrap_used.rs:65:17
   |
LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message

error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise
  --> $DIR/unwrap_used.rs:72:13
   |
LL |     let _ = boxed_slice.get(1).unwrap();
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&boxed_slice[1]`

error: aborting due to 27 previous errors

