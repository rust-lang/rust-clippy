error: internal compiler error: encountered incremental compilation error with shallow_lint_levels_on(pass[45c2])
  |
  = help: This is a known issue with the compiler. Run `cargo clean -p pass` or `cargo clean` to allow your project to compile
  = note: Please follow the instructions below to create a bug report with the provided information
  = note: See <https://github.com/rust-lang/rust/issues/84970> for more information


thread 'rustc' panicked at /rustc/414482f6a0d4e7290f614300581a0b55442552a3/compiler/rustc_query_system/src/query/plumbing.rs:739:9:
Found unstable fingerprints for shallow_lint_levels_on(pass[45c2]): ShallowLintLevelMap { expectations: [], specs: {0: {LintId { lint: Lint { name: "clippy::ASSIGNING_CLONES", default_level: Allow, desc: "assigning the result of cloning may be inefficient", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::IGNORE_WITHOUT_REASON", default_level: Allow, desc: "ignored tests without messages", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::INLINE_ALWAYS", default_level: Allow, desc: "use of `#[inline(always)]`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::SHOULD_PANIC_WITHOUT_EXPECT", default_level: Allow, desc: "ensures that all `should_panic` attributes specify its expected panic message", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::BOOL_TO_INT_WITH_IF", default_level: Allow, desc: "using if to convert bool to int", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::BORROW_AS_PTR", default_level: Allow, desc: "borrowing just to cast to a raw pointer", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::CAST_LOSSLESS", default_level: Allow, desc: "casts using `as` that are known to be lossless, e.g., `x as u64` where `x: u8`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::CAST_POSSIBLE_TRUNCATION", default_level: Allow, desc: "casts that may cause truncation of the value, e.g., `x as u8` where `x: u32`, or `x as i32` where `x: f32`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::CAST_POSSIBLE_WRAP", default_level: Allow, desc: "casts that may cause wrapping around the value, e.g., `x as i32` where `x: u32` and `x > i32::MAX`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::CAST_PRECISION_LOSS", default_level: Allow, desc: "casts that cause loss of precision, e.g., `x as f32` where `x: u64`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::CAST_PTR_ALIGNMENT", default_level: Allow, desc: "cast from a pointer to a more strictly aligned pointer", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::CAST_SIGN_LOSS", default_level: Allow, desc: "casts from signed types to unsigned types, e.g., `x as u32` where `x: i32`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::PTR_AS_PTR", default_level: Allow, desc: "casting using `as` between raw pointers that doesn't change their constness, where `pointer::cast` could take the place of `as`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::PTR_CAST_CONSTNESS", default_level: Allow, desc: "casting using `as` on raw pointers to change constness when specialized methods apply", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::REF_AS_PTR", default_level: Allow, desc: "using `as` to cast a reference to pointer", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::CHECKED_CONVERSIONS", default_level: Allow, desc: "`try_from` could replace manual bounds checking when casting", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::COMPARISON_CHAIN", default_level: Allow, desc: "`if`s that can be rewritten with `match` and `cmp`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::SAME_FUNCTIONS_IN_IF_CONDITION", default_level: Allow, desc: "consecutive `if`s with the same function call", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::COPY_ITERATOR", default_level: Allow, desc: "implementing `Iterator` on a `Copy` type", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::DEFAULT_TRAIT_ACCESS", default_level: Allow, desc: "checks for literal calls to `Default::default()`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::EXPLICIT_DEREF_METHODS", default_level: Allow, desc: "Explicit use of deref or deref_mut method while not in a method chain.", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::REF_BINDING_TO_REFERENCE", default_level: Allow, desc: "`ref` binding to a reference", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::EXPL_IMPL_CLONE_ON_COPY", default_level: Allow, desc: "implementing `Clone` explicitly on `Copy` types", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::UNSAFE_DERIVE_DESERIALIZE", default_level: Allow, desc: "deriving `serde::Deserialize` on a type that has methods using `unsafe`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::DOC_COMMENT_DOUBLE_SPACE_LINEBREAKS", default_level: Allow, desc: "double-space used for doc comment linebreak instead of `\\`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::DOC_LINK_WITH_QUOTES", default_level: Allow, desc: "possible typo for an intra-doc link", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::DOC_MARKDOWN", default_level: Allow, desc: "presence of `_`, `::` or camel-case outside backticks in documentation", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::MISSING_ERRORS_DOC", default_level: Allow, desc: "`pub fn` returns `Result` without `# Errors` in doc comment", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::MISSING_PANICS_DOC", default_level: Allow, desc: "`pub fn` may panic without `# Panics` in doc comment", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::EMPTY_ENUM", default_level: Allow, desc: "enum with no variants", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::REDUNDANT_CLOSURE_FOR_METHOD_CALLS", default_level: Allow, desc: "redundant closures for method calls", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::FN_PARAMS_EXCESSIVE_BOOLS", default_level: Allow, desc: "using too many bools in function parameters", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::STRUCT_EXCESSIVE_BOOLS", default_level: Allow, desc: "using too many bools in a struct", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::UNNECESSARY_DEBUG_FORMATTING", default_level: Allow, desc: "`Debug` formatting applied to an `OsStr` or `Path` when `.display()` is available", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::FORMAT_PUSH_STRING", default_level: Allow, desc: "`format!(..)` appended to existing `String`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::MUST_USE_CANDIDATE", default_level: Allow, desc: "function or method that could take a `#[must_use]` attribute", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::REF_OPTION", default_level: Allow, desc: "function signature uses `&Option<T>` instead of `Option<&T>`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::TOO_MANY_LINES", default_level: Allow, desc: "functions with too many lines", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::IF_NOT_ELSE", default_level: Allow, desc: "`if` branches that could be swapped so no negation operation is necessary on the condition", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::IGNORED_UNIT_PATTERNS", default_level: Allow, desc: "suggest replacing `_` by `()` in patterns where appropriate", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::IMPLICIT_HASHER", default_level: Allow, desc: "missing generalization over different hashers", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::INCONSISTENT_STRUCT_CONSTRUCTOR", default_level: Allow, desc: "the order of the field init is inconsistent with the order in the struct definition", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::INDEX_REFUTABLE_SLICE", default_level: Allow, desc: "avoid indexing on slices which could be destructed", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::MAYBE_INFINITE_ITER", default_level: Allow, desc: "possible infinite iteration", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::MANUAL_INSTANT_ELAPSED", default_level: Allow, desc: "subtraction between `Instant::now()` and previous `Instant`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::UNCHECKED_DURATION_SUBTRACTION", default_level: Allow, desc: "finds unchecked subtraction of a 'Duration' from an 'Instant'", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::INVALID_UPCAST_COMPARISONS", default_level: Allow, desc: "a comparison involving an upcast which is always true or false", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::STRUCT_FIELD_NAMES", default_level: Allow, desc: "structs where all fields share a prefix/postfix or contain the name of the struct", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::ITEMS_AFTER_STATEMENTS", default_level: Allow, desc: "blocks where an item comes after a statement", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::ITER_NOT_RETURNING_ITERATOR", default_level: Allow, desc: "methods named `iter` or `iter_mut` that do not return an `Iterator`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::INTO_ITER_WITHOUT_ITER", default_level: Allow, desc: "implementing `IntoIterator for (&|&mut) Type` without an inherent `iter(_mut)` method", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::ITER_WITHOUT_INTO_ITER", default_level: Allow, desc: "implementing `iter(_mut)` without an associated `IntoIterator for (&|&mut) Type` impl", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::LARGE_FUTURES", default_level: Allow, desc: "large future may lead to unexpected stack overflows", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::LARGE_STACK_ARRAYS", default_level: Allow, desc: "allocating large arrays on stack may cause stack overflow", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::ELIDABLE_LIFETIME_NAMES", default_level: Allow, desc: "lifetime name that can be replaced with the anonymous lifetime", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::LARGE_DIGIT_GROUPS", default_level: Allow, desc: "grouping digits into groups that are too large", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::UNREADABLE_LITERAL", default_level: Allow, desc: "long literal without underscores", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::EXPLICIT_INTO_ITER_LOOP", default_level: Allow, desc: "for-looping over `_.into_iter()` when `_` would do", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::EXPLICIT_ITER_LOOP", default_level: Allow, desc: "for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::MACRO_USE_IMPORTS", default_level: Allow, desc: "#[macro_use] is no longer needed", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::MANUAL_ASSERT", default_level: Allow, desc: "`panic!` and only a `panic!` in `if`-then statement", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::MANUAL_IS_POWER_OF_TWO", default_level: Allow, desc: "manually reimplementing `is_power_of_two`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::MANUAL_LET_ELSE", default_level: Allow, desc: "manual implementation of a let...else statement", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::MANUAL_STRING_NEW", default_level: Allow, desc: "empty String is being created manually", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::MATCH_BOOL", default_level: Allow, desc: "a `match` on a boolean expression instead of an `if..else` block", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::MATCH_SAME_ARMS", default_level: Allow, desc: "`match` with identical arm bodies", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::MATCH_WILDCARD_FOR_SINGLE_VARIANTS", default_level: Allow, desc: "a wildcard enum match for a single variant", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::MATCH_WILD_ERR_ARM", default_level: Allow, desc: "a `match` with `Err(_)` arm and take drastic actions", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::SINGLE_MATCH_ELSE", default_level: Allow, desc: "a `match` statement with two arms where the second arm's pattern is a placeholder instead of a specific match pattern", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS", default_level: Allow, desc: "Checks for calls to ends_with with case-sensitive file extensions", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::CLONED_INSTEAD_OF_COPIED", default_level: Allow, desc: "used `cloned` where `copied` could be used instead", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::FILTER_MAP_NEXT", default_level: Allow, desc: "using combination of `filter_map` and `next` which can usually be written as a single method call", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::FLAT_MAP_OPTION", default_level: Allow, desc: "used `flat_map` where `filter_map` could be used instead", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::FORMAT_COLLECT", default_level: Allow, desc: "`format!`ing every element in a collection, then collecting the strings into a new `String`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::FROM_ITER_INSTEAD_OF_COLLECT", default_level: Allow, desc: "use `.collect()` instead of `::from_iter()`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::IMPLICIT_CLONE", default_level: Allow, desc: "implicitly cloning a value by invoking a function on its dereferenced type", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::INEFFICIENT_TO_STRING", default_level: Allow, desc: "using `to_string` on `&&T` where `T: ToString`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::ITER_FILTER_IS_OK", default_level: Allow, desc: "filtering an iterator over `Result`s for `Ok` can be achieved with `flatten`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::ITER_FILTER_IS_SOME", default_level: Allow, desc: "filtering an iterator over `Option`s for `Some` can be achieved with `flatten`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::MANUAL_IS_VARIANT_AND", default_level: Allow, desc: "using `.map(f).unwrap_or_default()`, which is more succinctly expressed as `is_some_and(f)` or `is_ok_and(f)`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::MAP_UNWRAP_OR", default_level: Allow, desc: "using `.map(f).unwrap_or(a)` or `.map(f).unwrap_or_else(func)`, which are more succinctly expressed as `map_or(a, f)` or `map_or_else(a, f)`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::NAIVE_BYTECOUNT", default_level: Allow, desc: "use of naive `<slice>.filter(|&x| x == y).count()` to count byte values", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::OPTION_AS_REF_CLONED", default_level: Allow, desc: "cloning an `Option` via `as_ref().cloned()`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::STABLE_SORT_PRIMITIVE", default_level: Allow, desc: "use of sort() when sort_unstable() is equivalent", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::STR_SPLIT_AT_NEWLINE", default_level: Allow, desc: "splitting a trimmed string at hard-coded newlines", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::UNNECESSARY_JOIN", default_level: Allow, desc: "using `.collect::<Vec<String>>().join(\"\")` on an iterator", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::USED_UNDERSCORE_BINDING", default_level: Allow, desc: "using a binding which is prefixed with an underscore", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::USED_UNDERSCORE_ITEMS", default_level: Allow, desc: "using a item which is prefixed with an underscore", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::MISMATCHING_TYPE_PARAM_ORDER", default_level: Allow, desc: "type parameter positioned inconsistently between type def and impl block", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::MISSING_FIELDS_IN_DEBUG", default_level: Allow, desc: "missing fields in manual `Debug` implementation", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::MUT_MUT", default_level: Allow, desc: "usage of double-mut refs, e.g., `&mut &mut ...`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::NEEDLESS_CONTINUE", default_level: Allow, desc: "`continue` statements that can be replaced by a rearrangement of code", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::NEEDLESS_FOR_EACH", default_level: Allow, desc: "using `for_each` where a `for` loop would be simpler", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::NEEDLESS_PASS_BY_VALUE", default_level: Allow, desc: "functions taking arguments by value, but not consuming them in its body", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::NO_EFFECT_UNDERSCORE_BINDING", default_level: Allow, desc: "binding to `_` prefixed variable with no side-effect", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::NO_MANGLE_WITH_RUST_ABI", default_level: Allow, desc: "convert Rust ABI functions to C ABI", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::MANY_SINGLE_CHAR_NAMES", default_level: Allow, desc: "too many single character bindings", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::SIMILAR_NAMES", default_level: Allow, desc: "similarly named items and bindings", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Allow, lint_id: None, src: CommandLine("clippy::similar_names", Allow) }, LintId { lint: Lint { name: "clippy::NON_STD_LAZY_STATICS", default_level: Allow, desc: "lazy static that could be replaced by `std::sync::LazyLock`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::FLOAT_CMP", default_level: Allow, desc: "using `==` or `!=` on float values instead of comparing difference with an allowed error", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::MANUAL_MIDPOINT", default_level: Allow, desc: "manual implementation of `midpoint` which can overflow", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::NEEDLESS_BITWISE_BOOL", default_level: Allow, desc: "Boolean expressions that use bitwise rather than lazy operators", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::VERBOSE_BIT_MASK", default_level: Allow, desc: "expressions where a bit mask is less readable than the corresponding method call", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::LARGE_TYPES_PASSED_BY_VALUE", default_level: Allow, desc: "functions taking large arguments by value", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::TRIVIALLY_COPY_PASS_BY_REF", default_level: Allow, desc: "functions taking small copyable arguments by reference", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::PUB_UNDERSCORE_FIELDS", default_level: Allow, desc: "struct field prefixed with underscore and marked public", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::RANGE_MINUS_ONE", default_level: Allow, desc: "`x..=(y-1)` reads better as `x..y`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::RANGE_PLUS_ONE", default_level: Allow, desc: "`x..(y+1)` reads better as `x..=y`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::NEEDLESS_RAW_STRING_HASHES", default_level: Allow, desc: "suggests reducing the number of hashes around a raw string literal", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::REDUNDANT_ELSE", default_level: Allow, desc: "`else` branch that can be removed without changing semantics", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::REF_OPTION_REF", default_level: Allow, desc: "use `Option<&T>` instead of `&Option<&T>`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::RETURN_SELF_NOT_MUST_USE", default_level: Allow, desc: "missing `#[must_use]` annotation on a method returning `Self`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::SEMICOLON_IF_NOTHING_RETURNED", default_level: Allow, desc: "add a semicolon if nothing is returned", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::SINGLE_CHAR_PATTERN", default_level: Allow, desc: "using a single-character str where a char could be used, e.g., `_.split(\"x\")`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::STRING_ADD_ASSIGN", default_level: Allow, desc: "using `x = x + ..` where x is a `String` instead of `push_str()`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::TRANSMUTE_PTR_TO_PTR", default_level: Allow, desc: "transmutes from a pointer to a pointer / a reference to a reference", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::LINKEDLIST", default_level: Allow, desc: "usage of LinkedList, usually a vector is faster, or a more specialized data structure like a `VecDeque`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::OPTION_OPTION", default_level: Allow, desc: "usage of `Option<Option<T>>`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::UNICODE_NOT_NFC", default_level: Allow, desc: "using a Unicode literal not in NFC normal form (see [Unicode tr15](http://www.unicode.org/reports/tr15/) for further information)", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::UNNECESSARY_BOX_RETURNS", default_level: Allow, desc: "Needlessly returning a Box", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::UNNECESSARY_LITERAL_BOUND", default_level: Allow, desc: "detects &str that could be &'static str in function return types", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::UNNECESSARY_SEMICOLON", default_level: Allow, desc: "unnecessary semicolon after expression returning `()`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::UNNECESSARY_WRAPS", default_level: Allow, desc: "functions that only return `Ok` or `Some`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::UNNESTED_OR_PATTERNS", default_level: Allow, desc: "unnested or-patterns, e.g., `Foo(Bar) | Foo(Baz) instead of `Foo(Bar | Baz)`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::UNUSED_ASYNC", default_level: Allow, desc: "finds async functions with no await statements", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::UNUSED_SELF", default_level: Allow, desc: "methods that contain a `self` argument but don't use it", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::ENUM_GLOB_USE", default_level: Allow, desc: "use items that import all variants of an enum", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::WILDCARD_IMPORTS", default_level: Allow, desc: "lint `use _::*` statements", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "clippy::ZERO_SIZED_MAP_VALUES", default_level: Allow, desc: "usage of map with zero-sized value type", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::pedantic", Warn) }, LintId { lint: Lint { name: "WARNINGS", default_level: Warn, desc: "mass-change the level for lints which produce warnings", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Deny, lint_id: None, src: CommandLine("warnings", Deny) }, LintId { lint: Lint { name: "UNSAFE_CODE", default_level: Allow, desc: "usage of `unsafe` code and other potentially unsound constructs", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: true } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("unsafe_code", Warn) }, LintId { lint: Lint { name: "BARE_TRAIT_OBJECTS", default_level: Warn, desc: "suggest using `dyn Trait` for trait objects", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>", reason: EditionError(Edition2021), explain_reason: true }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("rust_2018_idioms", Warn) }, LintId { lint: Lint { name: "UNUSED_EXTERN_CRATES", default_level: Allow, desc: "extern crates that are never used", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("rust_2018_idioms", Warn) }, LintId { lint: Lint { name: "ELLIPSIS_INCLUSIVE_RANGE_PATTERNS", default_level: Warn, desc: "`...` range patterns are deprecated", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>", reason: EditionError(Edition2021), explain_reason: true }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("rust_2018_idioms", Warn) }, LintId { lint: Lint { name: "ELIDED_LIFETIMES_IN_PATHS", default_level: Allow, desc: "hidden lifetime parameters in types are deprecated", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("rust_2018_idioms", Warn) }, LintId { lint: Lint { name: "EXPLICIT_OUTLIVES_REQUIREMENTS", default_level: Allow, desc: "outlives requirements can be inferred", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("rust_2018_idioms", Warn) }, LintId { lint: Lint { name: "clippy::ASSERTIONS_ON_CONSTANTS", default_level: Warn, desc: "`assert!(true)` / `assert!(false)` will be optimized out by the compiler, and should probably be replaced by a `panic!()` or `unreachable!()`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MIXED_ATTRIBUTES_STYLE", default_level: Warn, desc: "item has both inner and outer attributes", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::NON_MINIMAL_CFG", default_level: Warn, desc: "ensure that all `cfg(any())` and `cfg(all())` have more than one condition", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::BLOCKS_IN_CONDITIONS", default_level: Warn, desc: "useless or complex blocks that can be eliminated in conditions", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::BOOL_ASSERT_COMPARISON", default_level: Warn, desc: "Using a boolean as comparison value in an assert_* macro when there is no need", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::BOX_DEFAULT", default_level: Warn, desc: "Using Box::new(T::default()) instead of Box::default()", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::BYTE_CHAR_SLICES", default_level: Warn, desc: "hard to read byte char slice", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::FN_TO_NUMERIC_CAST", default_level: Warn, desc: "casting a function pointer to a numeric type other than `usize`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::FN_TO_NUMERIC_CAST_WITH_TRUNCATION", default_level: Warn, desc: "casting a function pointer to a numeric type not wide enough to store the address", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MANUAL_DANGLING_PTR", default_level: Warn, desc: "casting small constant literals to pointers to create dangling pointers", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::ZERO_PTR", default_level: Warn, desc: "using `0 as *{const, mut} T`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::COLLAPSIBLE_ELSE_IF", default_level: Warn, desc: "nested `else`-`if` expressions that can be collapsed (e.g., `else { if x { ... } }`)", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::COLLAPSIBLE_IF", default_level: Warn, desc: "nested `if`s that can be collapsed (e.g., `if x { if y { ... } }`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::IF_SAME_THEN_ELSE", default_level: Warn, desc: "`if` with the same `then` and `else` blocks", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::FIELD_REASSIGN_WITH_DEFAULT", default_level: Warn, desc: "binding initialized with Default should have its fields set in the initializer", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::DEFAULT_INSTEAD_OF_ITER_EMPTY", default_level: Warn, desc: "check `std::iter::Empty::default()` and replace with `std::iter::empty()`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::NEEDLESS_BORROW", default_level: Warn, desc: "taking a reference that is going to be automatically dereferenced", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::DISALLOWED_MACROS", default_level: Warn, desc: "use of a disallowed macro", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::DISALLOWED_METHODS", default_level: Warn, desc: "use of a disallowed method call", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::DISALLOWED_NAMES", default_level: Warn, desc: "usage of a disallowed/placeholder name", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::DISALLOWED_TYPES", default_level: Warn, desc: "use of disallowed types", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::DOC_LAZY_CONTINUATION", default_level: Warn, desc: "require every line of a paragraph to be indented and marked", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::DOC_OVERINDENTED_LIST_ITEMS", default_level: Warn, desc: "ensure list items are not overindented", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MISSING_SAFETY_DOC", default_level: Warn, desc: "`pub unsafe fn` without `# Safety` docs", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::NEEDLESS_DOCTEST_MAIN", default_level: Warn, desc: "presence of `fn main() {` in code examples", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::REDUNDANT_CLOSURE", default_level: Warn, desc: "redundant closures, i.e., `|a| foo(a)` (which can be written as just `foo`)", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::EXCESSIVE_PRECISION", default_level: Warn, desc: "excessive precision for float literal", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::UNINLINED_FORMAT_ARGS", default_level: Warn, desc: "using non-inlined variables in `format!` calls", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::FROM_OVER_INTO", default_level: Warn, desc: "Warns on implementations of `Into<..>` to use `From<..>`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::FROM_STR_RADIX_10", default_level: Warn, desc: "from_str_radix with radix 10", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::DOUBLE_MUST_USE", default_level: Warn, desc: "`#[must_use]` attribute on a `#[must_use]`-returning function / method", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MUST_USE_UNIT", default_level: Warn, desc: "`#[must_use]` attribute on a unit-returning function / method", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::RESULT_UNIT_ERR", default_level: Warn, desc: "public function returning `Result` with an `Err` type of `()`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::IMPLICIT_SATURATING_ADD", default_level: Warn, desc: "Perform saturating addition instead of implicitly checking max bound of data type", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::IMPLICIT_SATURATING_SUB", default_level: Warn, desc: "Perform saturating subtraction instead of implicitly checking lower bound of data type", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::INHERENT_TO_STRING", default_level: Warn, desc: "type implements inherent method `to_string()`, but should instead implement the `Display` trait", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::INIT_NUMBERED_FIELDS", default_level: Warn, desc: "numbered fields in tuple struct initializer", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::ENUM_VARIANT_NAMES", default_level: Warn, desc: "enums where all variants share a prefix/postfix", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MODULE_INCEPTION", default_level: Warn, desc: "modules that have the same name as their parent module", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::ITEMS_AFTER_TEST_MODULE", default_level: Warn, desc: "An item was found after the testing module `tests`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::ITEMS_BEFORE_USE", default_level: Warn, desc: "checks if module level `use` statements precede all other items", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::LEGACY_NUMERIC_CONSTANTS", default_level: Warn, desc: "checks for usage of legacy std numeric constants and methods", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::COMPARISON_TO_EMPTY", default_level: Warn, desc: "checking `x == \"\"` or `x == []` (or similar) when `.is_empty()` could be used instead", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::LEN_WITHOUT_IS_EMPTY", default_level: Warn, desc: "traits or impls with a public `len` method but no corresponding `is_empty` method", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::LEN_ZERO", default_level: Warn, desc: "checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` could be used instead", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::INCONSISTENT_DIGIT_GROUPING", default_level: Warn, desc: "integer literals with digits grouped inconsistently", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::UNUSUAL_BYTE_GROUPINGS", default_level: Warn, desc: "binary or hex literals that aren't grouped by four", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::FOR_KV_MAP", default_level: Warn, desc: "looping on a map using `iter` when `keys` or `values` would do", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MANUAL_SLICE_FILL", default_level: Warn, desc: "manually filling a slice with a value", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MANUAL_WHILE_LET_SOME", default_level: Warn, desc: "checking for emptiness of a `Vec` in the loop condition and popping an element in the body", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::NEEDLESS_RANGE_LOOP", default_level: Warn, desc: "for-looping over a range of indices where an iterator over items would do", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::SAME_ITEM_PUSH", default_level: Warn, desc: "the same item is pushed inside of a for loop", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::UNUSED_ENUMERATE_INDEX", default_level: Warn, desc: "using `.enumerate()` and immediately dropping the index", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::WHILE_LET_ON_ITERATOR", default_level: Warn, desc: "using a `while let` loop instead of a for loop on an iterator", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MAIN_RECURSION", default_level: Warn, desc: "recursion using the entrypoint", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MANUAL_ASYNC_FN", default_level: Warn, desc: "manual implementations of `async` functions can be simplified using the dedicated syntax", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MANUAL_BITS", default_level: Warn, desc: "manual implementation of `size_of::<T>() * 8` can be simplified with `T::BITS`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MANUAL_IS_FINITE", default_level: Warn, desc: "use dedicated method to check if a float is finite", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MANUAL_IS_INFINITE", default_level: Warn, desc: "use dedicated method to check if a float is infinite", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MANUAL_IS_ASCII_CHECK", default_level: Warn, desc: "use dedicated method to check ascii range", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MANUAL_NON_EXHAUSTIVE", default_level: Warn, desc: "manual implementations of the non-exhaustive pattern can be simplified using #[non_exhaustive]", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MANUAL_ROTATE", default_level: Warn, desc: "using bit shifts to rotate integers", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MATCH_RESULT_OK", default_level: Warn, desc: "usage of `ok()` in `let Some(pat)` statements is unnecessary, match on `Ok(pat)` instead", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::COLLAPSIBLE_MATCH", default_level: Warn, desc: "Nested `match` or `if let` expressions where the patterns may be \"collapsed\" together.", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::INFALLIBLE_DESTRUCTURING_MATCH", default_level: Warn, desc: "a `match` statement with a single infallible arm instead of a `let`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MANUAL_MAP", default_level: Warn, desc: "reimplementation of `map`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MATCH_LIKE_MATCHES_MACRO", default_level: Warn, desc: "a match that could be written with the matches! macro", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MATCH_OVERLAPPING_ARM", default_level: Warn, desc: "a `match` with overlapping arms", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MATCH_REF_PATS", default_level: Warn, desc: "a `match` or `if let` with all arms prefixed with `&` instead of deref-ing the match expression", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::REDUNDANT_PATTERN_MATCHING", default_level: Warn, desc: "use the proper utility function avoiding an `if let`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::SINGLE_MATCH", default_level: Warn, desc: "a `match` statement with a single nontrivial arm (i.e., where the other arm is `_ => {}`) instead of `if let`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MEM_REPLACE_OPTION_WITH_NONE", default_level: Warn, desc: "replacing an `Option` with `None` instead of `take()`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MEM_REPLACE_OPTION_WITH_SOME", default_level: Warn, desc: "replacing an `Option` with `Some` instead of `replace()`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MEM_REPLACE_WITH_DEFAULT", default_level: Warn, desc: "replacing a value of type `T` with `T::default()` instead of using `std::mem::take`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::BYTES_NTH", default_level: Warn, desc: "replace `.bytes().nth()` with `.as_bytes().get()`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::CHARS_LAST_CMP", default_level: Warn, desc: "using `.chars().last()` or `.chars().next_back()` to check if a string ends with a char", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::CHARS_NEXT_CMP", default_level: Warn, desc: "using `.chars().next()` to check if a string starts with a char", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::ERR_EXPECT", default_level: Warn, desc: "using `.err().expect(\"\")` when `.expect_err(\"\")` can be used", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::FILTER_MAP_BOOL_THEN", default_level: Warn, desc: "checks for usage of `bool::then` in `Iterator::filter_map`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::GET_FIRST", default_level: Warn, desc: "Using `x.get(0)` when `x.first()` or `x.front()` is simpler", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::INTO_ITER_ON_REF", default_level: Warn, desc: "using `.into_iter()` on a reference", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::IO_OTHER_ERROR", default_level: Warn, desc: "calling `std::io::Error::new(std::io::ErrorKind::Other, _)`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::IS_DIGIT_ASCII_RADIX", default_level: Warn, desc: "use of `char::is_digit(..)` with literal radix of 10 or 16", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::ITER_CLONED_COLLECT", default_level: Warn, desc: "using `.cloned().collect()` on slice to create a `Vec`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::ITER_NEXT_SLICE", default_level: Warn, desc: "using `.iter().next()` on a sliced array, which can be shortened to just `.get()`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::ITER_NTH", default_level: Warn, desc: "using `.iter().nth()` on a standard library type with O(1) element access", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::ITER_NTH_ZERO", default_level: Warn, desc: "replace `iter.nth(0)` with `iter.next()`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::ITER_SKIP_NEXT", default_level: Warn, desc: "using `.skip(x).next()` on an iterator", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MANUAL_NEXT_BACK", default_level: Warn, desc: "manual reverse iteration of `DoubleEndedIterator`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MANUAL_OK_OR", default_level: Warn, desc: "finds patterns that can be encoded more concisely with `Option::ok_or`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MANUAL_REPEAT_N", default_level: Warn, desc: "detect `repeat().take()` that can be replaced with `repeat_n()`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MANUAL_SATURATING_ARITHMETIC", default_level: Warn, desc: "`.checked_add/sub(x).unwrap_or(MAX/MIN)`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MAP_CLONE", default_level: Warn, desc: "using `iterator.map(|x| x.clone())`, or dereferencing closures for `Copy` types", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MAP_COLLECT_RESULT_UNIT", default_level: Warn, desc: "using `.map(_).collect::<Result<(),_>()`, which can be replaced with `try_for_each`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MUT_MUTEX_LOCK", default_level: Warn, desc: "`&mut Mutex::lock` does unnecessary locking", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::NEW_RET_NO_SELF", default_level: Warn, desc: "not returning type containing `Self` in a `new` method", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::OBFUSCATED_IF_ELSE", default_level: Warn, desc: "use of `.then_some(..).unwrap_or(..)` can be written more clearly with `if .. else ..`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::OK_EXPECT", default_level: Warn, desc: "using `ok().expect()`, which gives worse error messages than calling `expect` directly on the Result", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::OPTION_MAP_OR_NONE", default_level: Warn, desc: "using `Option.map_or(None, f)`, which is more succinctly expressed as `and_then(f)`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::RESULT_MAP_OR_INTO_OPTION", default_level: Warn, desc: "using `Result.map_or(None, Some)`, which is more succinctly expressed as `ok()`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::SHOULD_IMPLEMENT_TRAIT", default_level: Warn, desc: "defining a method that should be implementing a std trait", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::SINGLE_CHAR_ADD_STR", default_level: Warn, desc: "`push_str()` or `insert_str()` used with a single-character string literal as parameter", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::STRING_EXTEND_CHARS", default_level: Warn, desc: "using `x.extend(s.chars())` where s is a `&str` or `String`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::UNNECESSARY_FALLIBLE_CONVERSIONS", default_level: Warn, desc: "calling the `try_from` and `try_into` trait methods when `From`/`Into` is implemented", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::UNNECESSARY_FOLD", default_level: Warn, desc: "using `fold` when a more succinct alternative exists", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::UNNECESSARY_LAZY_EVALUATIONS", default_level: Warn, desc: "using unnecessary lazy evaluation, which can be replaced with simpler eager evaluation", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::UNNECESSARY_MAP_OR", default_level: Warn, desc: "reduce unnecessary calls to `.map_or(bool, …)`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::UNWRAP_OR_DEFAULT", default_level: Warn, desc: "using `.unwrap_or`, etc. with an argument that constructs a default value", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::WRONG_SELF_CONVENTION", default_level: Warn, desc: "defining a method named with an established prefix (like \"into_\") that takes `self` with the wrong convention", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::TOPLEVEL_REF_ARG", default_level: Warn, desc: "an entire binding declared as `ref`, in a function argument or a `let` statement", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::BUILTIN_TYPE_SHADOW", default_level: Warn, desc: "shadowing a builtin type", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::DUPLICATE_UNDERSCORE_ARGUMENT", default_level: Warn, desc: "function arguments having names which only differ by an underscore", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MIXED_CASE_HEX_LITERALS", default_level: Warn, desc: "hex literals whose letter digits are not consistently upper- or lowercased", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::REDUNDANT_PATTERN", default_level: Warn, desc: "using `name @ _` in a pattern", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MISSING_ENFORCED_IMPORT_RENAMES", default_level: Warn, desc: "enforce import renames", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::UNNECESSARY_MUT_PASSED", default_level: Warn, desc: "an argument passed as a mutable reference although the callee only demands an immutable reference", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::NEEDLESS_BORROWS_FOR_GENERIC_ARGS", default_level: Warn, desc: "taking a reference that is going to be automatically dereferenced", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::NEEDLESS_ELSE", default_level: Warn, desc: "empty else branch", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::NEEDLESS_LATE_INIT", default_level: Warn, desc: "late initializations that can be replaced by a `let` statement with an initializer", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::NEEDLESS_PARENS_ON_RANGE_LITERALS", default_level: Warn, desc: "needless parenthesis on range literals can be removed", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::NEG_MULTIPLY", default_level: Warn, desc: "multiplying integers by `-1`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::NEW_WITHOUT_DEFAULT", default_level: Warn, desc: "`pub fn new() -> Self` method without `Default` implementation", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::BORROW_INTERIOR_MUTABLE_CONST", default_level: Warn, desc: "referencing `const` with interior mutability", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::DECLARE_INTERIOR_MUTABLE_CONST", default_level: Warn, desc: "declaring `const` with interior mutability", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::JUST_UNDERSCORES_AND_DIGITS", default_level: Warn, desc: "unclear name", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::ASSIGN_OP_PATTERN", default_level: Warn, desc: "assigning the result of an operation on a variable to that same variable", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::OP_REF", default_level: Warn, desc: "taking a reference to satisfy the type constraints on `==`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::PARTIALEQ_TO_NONE", default_level: Warn, desc: "Binary comparison to `Option<T>::None` relies on `T: PartialEq`, which is unneeded", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::CMP_NULL", default_level: Warn, desc: "comparing a pointer to a null pointer, suggesting to use `.is_null()` instead", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::PTR_ARG", default_level: Warn, desc: "fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::PTR_EQ", default_level: Warn, desc: "use `std::ptr::eq` when comparing raw pointers", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::QUESTION_MARK", default_level: Warn, desc: "checks for expressions that could be replaced by the `?` operator", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MANUAL_RANGE_CONTAINS", default_level: Warn, desc: "manually reimplementing {`Range`, `RangeInclusive`}`::contains`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::REDUNDANT_FIELD_NAMES", default_level: Warn, desc: "checks for fields in struct literals where shorthands could be used", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::REDUNDANT_STATIC_LIFETIMES", default_level: Warn, desc: "Using explicit `'static` lifetime for constants or statics when elision rules would allow omitting them.", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::LET_AND_RETURN", default_level: Warn, desc: "creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a block", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::NEEDLESS_RETURN", default_level: Warn, desc: "using a return statement like `return expr;` where an expression would suffice", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::NEEDLESS_RETURN_WITH_QUESTION_MARK", default_level: Warn, desc: "using a return statement like `return Err(expr)?;` where removing it would suffice", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::SELF_NAMED_CONSTRUCTORS", default_level: Warn, desc: "method should not have the same name as the type it is implemented for", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::SINGLE_COMPONENT_PATH_IMPORTS", default_level: Warn, desc: "imports with single component path are redundant", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::MANUAL_PATTERN_CHAR_COMPARISON", default_level: Warn, desc: "manual char comparison in string patterns", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::TRIM_SPLIT_WHITESPACE", default_level: Warn, desc: "using `str::trim()` or alike before `str::split_whitespace`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::TABS_IN_DOC_COMMENTS", default_level: Warn, desc: "using tabs in doc comments is not recommended", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::TO_DIGIT_IS_SOME", default_level: Warn, desc: "`char.is_digit()` is clearer", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::TO_STRING_TRAIT_IMPL", default_level: Warn, desc: "check for direct implementations of `ToString`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::OWNED_COW", default_level: Warn, desc: "needlessly owned Cow type", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::LET_UNIT_VALUE", default_level: Warn, desc: "creating a `let` binding to a value of unit type, which usually can't be used afterwards", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::UNNECESSARY_OWNED_EMPTY_STRINGS", default_level: Warn, desc: "detects cases of references to owned empty strings being passed as an argument to a function expecting `&str`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::UNNEEDED_STRUCT_PATTERN", default_level: Warn, desc: "using struct pattern to match against unit variant", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::UNSAFE_REMOVED_FROM_NAME", default_level: Warn, desc: "`unsafe` removed from API names on import", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::UNUSED_UNIT", default_level: Warn, desc: "needless unit expression", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::UPPER_CASE_ACRONYMS", default_level: Warn, desc: "capitalized acronyms are against the naming convention", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::NEEDLESS_PUB_SELF", default_level: Warn, desc: "checks for usage of `pub(self)` and `pub(in self)`.", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::PRINTLN_EMPTY_STRING", default_level: Warn, desc: "using `println!(\"\")` with an empty string", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::PRINT_LITERAL", default_level: Warn, desc: "printing a literal with a format string", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::PRINT_WITH_NEWLINE", default_level: Warn, desc: "using `print!()` with a format string that ends in a single newline", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::WRITELN_EMPTY_STRING", default_level: Warn, desc: "using `writeln!(buf, \"\")` with an empty string", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::WRITE_LITERAL", default_level: Warn, desc: "writing a literal with a format string", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::WRITE_WITH_NEWLINE", default_level: Warn, desc: "using `write!()` with a format string that ends in a single newline", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::style", Warn) }, LintId { lint: Lint { name: "clippy::DBG_MACRO", default_level: Allow, desc: "`dbg!` macro is intended as a debugging tool", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }: LevelAndSource { level: Warn, lint_id: None, src: CommandLine("clippy::dbg_macro", Warn) }}} }
stack backtrace:
   0:     0x7f0174558c93 - <std::sys::backtrace::BacktraceLock::print::DisplayBacktrace as core::fmt::Display>::fmt::h2f02338d4ae6d8b0
   1:     0x7f0174c05987 - core::fmt::write::h5e77c22335cabc7f
   2:     0x7f0175cbf611 - std::io::Write::write_fmt::hccf7b69d0b3d44cc
   3:     0x7f0174558af2 - std::sys::backtrace::BacktraceLock::print::hb22254026b13323e
   4:     0x7f017455c6ea - std::panicking::default_hook::{{closure}}::h15ac4e3ee7801be5
   5:     0x7f017455c26f - std::panicking::default_hook::h15db2a3343942a16
   6:     0x7f017358ba03 - std[7cad246a9e76d988]::panicking::update_hook::<alloc[7a88f824ccc9bf63]::boxed::Box<rustc_driver_impl[817478e824aa827]::install_ice_hook::{closure#1}>>::{closure#0}
   7:     0x7f017455cf63 - std::panicking::rust_panic_with_hook::h67f3fa85499b6cf9
   8:     0x7f017455cc5a - std::panicking::begin_panic_handler::{{closure}}::h40a30e994b26720e
   9:     0x7f0174559169 - std::sys::backtrace::__rust_end_short_backtrace::hb5bcb2f6ea295c8b
  10:     0x7f017455c91d - __rustc[bf3627c2b8b7eae9]::rust_begin_unwind
  11:     0x7f0170e874e0 - core::panicking::panic_fmt::h20722ae9d0312a90
  12:     0x7f0173ba6579 - rustc_query_system[341f49cf1150f7a3]::query::plumbing::incremental_verify_ich_failed::<rustc_middle[8f648b1898e8f992]::ty::context::TyCtxt>
  13:     0x7f01750892d1 - rustc_query_system[341f49cf1150f7a3]::query::plumbing::try_execute_query::<rustc_query_impl[c116a7b28af8393]::DynamicConfig<rustc_data_structures[a0ae7bd4be3b1039]::vec_cache::VecCache<rustc_hir[6ae6478e0dc045ab]::hir_id::OwnerId, rustc_middle[8f648b1898e8f992]::query::erase::Erased<[u8; 8usize]>, rustc_query_system[341f49cf1150f7a3]::dep_graph::graph::DepNodeIndex>, false, false, false>, rustc_query_impl[c116a7b28af8393]::plumbing::QueryCtxt, true>
  14:     0x7f01750873c3 - rustc_query_impl[c116a7b28af8393]::query_impl::shallow_lint_levels_on::get_query_incr::__rust_end_short_backtrace
  15:     0x7f0175082fb7 - rustc_lint[1b5bb4c8a5faf0b4]::levels::lints_that_dont_need_to_run
  16:     0x7f0175a02a62 - rustc_query_impl[c116a7b28af8393]::plumbing::__rust_begin_short_backtrace::<rustc_query_impl[c116a7b28af8393]::query_impl::lints_that_dont_need_to_run::dynamic_query::{closure#2}::{closure#0}, rustc_middle[8f648b1898e8f992]::query::erase::Erased<[u8; 8usize]>>
  17:     0x7f0175b1064c - rustc_query_system[341f49cf1150f7a3]::query::plumbing::try_execute_query::<rustc_query_impl[c116a7b28af8393]::DynamicConfig<rustc_query_system[341f49cf1150f7a3]::query::caches::SingleCache<rustc_middle[8f648b1898e8f992]::query::erase::Erased<[u8; 8usize]>>, false, false, false>, rustc_query_impl[c116a7b28af8393]::plumbing::QueryCtxt, true>
  18:     0x7f0176019af1 - rustc_query_impl[c116a7b28af8393]::query_impl::lints_that_dont_need_to_run::get_query_incr::__rust_end_short_backtrace
  19:     0x7f0175bad365 - rustc_lint[1b5bb4c8a5faf0b4]::late::check_crate::{closure#0}
  20:     0x7f0175bad889 - rustc_lint[1b5bb4c8a5faf0b4]::late::check_crate
  21:     0x7f0175babb9f - rustc_interface[2a1066e4df123d40]::passes::analysis
  22:     0x7f0175bab975 - rustc_query_impl[c116a7b28af8393]::plumbing::__rust_begin_short_backtrace::<rustc_query_impl[c116a7b28af8393]::query_impl::analysis::dynamic_query::{closure#2}::{closure#0}, rustc_middle[8f648b1898e8f992]::query::erase::Erased<[u8; 0usize]>>
  23:     0x7f0175ba6584 - rustc_query_system[341f49cf1150f7a3]::query::plumbing::try_execute_query::<rustc_query_impl[c116a7b28af8393]::DynamicConfig<rustc_query_system[341f49cf1150f7a3]::query::caches::SingleCache<rustc_middle[8f648b1898e8f992]::query::erase::Erased<[u8; 0usize]>>, false, false, false>, rustc_query_impl[c116a7b28af8393]::plumbing::QueryCtxt, true>
  24:     0x7f0175ba5ea8 - rustc_query_impl[c116a7b28af8393]::query_impl::analysis::get_query_incr::__rust_end_short_backtrace
  25:     0x7f0175e149c7 - rustc_interface[2a1066e4df123d40]::passes::create_and_enter_global_ctxt::<core[ee896a018689144d]::option::Option<rustc_interface[2a1066e4df123d40]::queries::Linker>, rustc_driver_impl[817478e824aa827]::run_compiler::{closure#0}::{closure#2}>::{closure#2}::{closure#0}
  26:     0x7f0175d01ea6 - rustc_interface[2a1066e4df123d40]::interface::run_compiler::<(), rustc_driver_impl[817478e824aa827]::run_compiler::{closure#0}>::{closure#1}
  27:     0x7f0175cb62be - std[7cad246a9e76d988]::sys::backtrace::__rust_begin_short_backtrace::<rustc_interface[2a1066e4df123d40]::util::run_in_thread_with_globals<rustc_interface[2a1066e4df123d40]::util::run_in_thread_pool_with_globals<rustc_interface[2a1066e4df123d40]::interface::run_compiler<(), rustc_driver_impl[817478e824aa827]::run_compiler::{closure#0}>::{closure#1}, ()>::{closure#0}, ()>::{closure#0}::{closure#0}, ()>
  28:     0x7f0175cb672b - <<std[7cad246a9e76d988]::thread::Builder>::spawn_unchecked_<rustc_interface[2a1066e4df123d40]::util::run_in_thread_with_globals<rustc_interface[2a1066e4df123d40]::util::run_in_thread_pool_with_globals<rustc_interface[2a1066e4df123d40]::interface::run_compiler<(), rustc_driver_impl[817478e824aa827]::run_compiler::{closure#0}>::{closure#1}, ()>::{closure#0}, ()>::{closure#0}::{closure#0}, ()>::{closure#1} as core[ee896a018689144d]::ops::function::FnOnce<()>>::call_once::{shim:vtable#0}
  29:     0x7f0175cb7b2b - std::sys::pal::unix::thread::Thread::new::thread_start::h211a36f354245501
  30:     0x7f016faa57eb - <unknown>
  31:     0x7f016fb2918c - <unknown>
  32:                0x0 - <unknown>

error: the compiler unexpectedly panicked. this is a bug.

note: we would appreciate a bug report: https://github.com/rust-lang/rust-clippy/issues/new?template=ice.yml

note: please make sure that you have updated to the latest nightly

note: rustc 1.89.0-nightly (414482f6a 2025-05-13) running on x86_64-unknown-linux-gnu

note: compiler flags: --crate-type lib -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C incremental=[REDACTED] -Z binary-dep-depinfo

note: some of the compiler flags provided by cargo are hidden

query stack during panic:
#0 [shallow_lint_levels_on] looking up lint levels for ``
#1 [lints_that_dont_need_to_run] Computing all lints that are explicitly enabled or with a default level greater than Allow
... and 1 other queries... use `env RUST_BACKTRACE=1` to see the full query stack
note: Clippy version: clippy 0.1.89 (d44e35d595 2025-05-19)

error: could not compile `pass` (lib) due to 1 previous error
