error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:16:5
   |
LL |     u <= 0;
   |     ^^^^^^
   |
   = help: because `0` is the minimum value for this type, the case where the two sides are not equal never occurs, consider using `u == 0` instead
   = note: `-D clippy::absurd-extreme-comparisons` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::absurd_extreme_comparisons)]`

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:19:5
   |
LL |     u <= Z;
   |     ^^^^^^
   |
   = help: because `Z` is the minimum value for this type, the case where the two sides are not equal never occurs, consider using `u == Z` instead

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:22:5
   |
LL |     u < Z;
   |     ^^^^^
   |
   = help: because `Z` is the minimum value for this type, this comparison is always false

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:25:5
   |
LL |     Z >= u;
   |     ^^^^^^
   |
   = help: because `Z` is the minimum value for this type, the case where the two sides are not equal never occurs, consider using `Z == u` instead

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:28:5
   |
LL |     Z > u;
   |     ^^^^^
   |
   = help: because `Z` is the minimum value for this type, this comparison is always false

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:31:5
   |
LL |     u > u32::MAX;
   |     ^^^^^^^^^^^^
   |
   = help: because `u32::MAX` is the maximum value for this type, this comparison is always false

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:34:5
   |
LL |     u >= u32::MAX;
   |     ^^^^^^^^^^^^^
   |
   = help: because `u32::MAX` is the maximum value for this type, the case where the two sides are not equal never occurs, consider using `u == u32::MAX` instead

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:37:5
   |
LL |     u32::MAX < u;
   |     ^^^^^^^^^^^^
   |
   = help: because `u32::MAX` is the maximum value for this type, this comparison is always false

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:40:5
   |
LL |     u32::MAX <= u;
   |     ^^^^^^^^^^^^^
   |
   = help: because `u32::MAX` is the maximum value for this type, the case where the two sides are not equal never occurs, consider using `u32::MAX == u` instead

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:43:5
   |
LL |     1-1 > u;
   |     ^^^^^^^
   |
   = help: because `1-1` is the minimum value for this type, this comparison is always false

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:46:5
   |
LL |     u >= !0;
   |     ^^^^^^^
   |
   = help: because `!0` is the maximum value for this type, the case where the two sides are not equal never occurs, consider using `u == !0` instead

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:49:5
   |
LL |     u <= 12 - 2*6;
   |     ^^^^^^^^^^^^^
   |
   = help: because `12 - 2*6` is the minimum value for this type, the case where the two sides are not equal never occurs, consider using `u == 12 - 2*6` instead

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:53:5
   |
LL |     i < -127 - 1;
   |     ^^^^^^^^^^^^
   |
   = help: because `-127 - 1` is the minimum value for this type, this comparison is always false

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:56:5
   |
LL |     i8::MAX >= i;
   |     ^^^^^^^^^^^^
   |
   = help: because `i8::MAX` is the maximum value for this type, this comparison is always true

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:59:5
   |
LL |     3-7 < i32::MIN;
   |     ^^^^^^^^^^^^^^
   |
   = help: because `i32::MIN` is the minimum value for this type, this comparison is always false

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:63:5
   |
LL |     b >= true;
   |     ^^^^^^^^^
   |
   = help: because `true` is the maximum value for this type, the case where the two sides are not equal never occurs, consider using `b == true` instead

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:66:5
   |
LL |     false > b;
   |     ^^^^^^^^^
   |
   = help: because `false` is the minimum value for this type, this comparison is always false

error: <-comparison of unit values detected. This will always be false
  --> tests/ui/absurd-extreme-comparisons.rs:71:5
   |
LL |     () < {};
   |     ^^^^^^^
   |
   = note: `#[deny(clippy::unit_cmp)]` on by default

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:74:5
   |
LL |     Duration::from_secs(0) > Duration::new(5, 0);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: because `Duration::from_secs(0)` is the minimum value for this type, this comparison is always false

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:76:5
   |
LL |     Duration::new(5, 0) < Duration::from_secs(0);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: because `Duration::from_secs(0)` is the minimum value for this type, this comparison is always false

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:82:5
   |
LL |     d < Duration::from_secs(0);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: because `Duration::from_secs(0)` is the minimum value for this type, this comparison is always false

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:84:5
   |
LL |     Duration::from_secs(0) > d;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: because `Duration::from_secs(0)` is the minimum value for this type, this comparison is always false

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:87:5
   |
LL |     d < Duration::from_millis(0);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: because `Duration::from_millis(0)` is the minimum value for this type, this comparison is always false

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:89:5
   |
LL |     Duration::from_micros(0) > d; 
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: because `Duration::from_micros(0)` is the minimum value for this type, this comparison is always false

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:92:5
   |
LL |     d <= Duration::from_nanos(0);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: because `Duration::from_nanos(0)` is the minimum value for this type, the case where the two sides are not equal never occurs, consider using `d == Duration::from_nanos(0)` instead

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:94:5
   |
LL |     Duration::from_nanos(0) >= d;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: because `Duration::from_nanos(0)` is the minimum value for this type, the case where the two sides are not equal never occurs, consider using `Duration::from_nanos(0) == d` instead

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:97:5
   |
LL |     d < Duration::default();
   |     ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: because `Duration::default()` is the minimum value for this type, this comparison is always false

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:99:5
   |
LL |     Duration::default() > d;
   |     ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: because `Duration::default()` is the minimum value for this type, this comparison is always false

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:102:5
   |
LL |     d < Duration::from_secs_f32(0.0);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: because `Duration::from_secs_f32(0.0)` is the minimum value for this type, this comparison is always false

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:104:5
   |
LL |     Duration::from_secs_f64(0.0) > d;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: because `Duration::from_secs_f64(0.0)` is the minimum value for this type, this comparison is always false

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:109:5
   |
LL |     d < Duration::new(zero_secs, zero_nanos);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: because `Duration::new(zero_secs, zero_nanos)` is the minimum value for this type, this comparison is always false

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:111:5
   |
LL |     Duration::new(zero_secs, zero_nanos) > d;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: because `Duration::new(zero_secs, zero_nanos)` is the minimum value for this type, this comparison is always false

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:125:5
   |
LL |     d < Duration::from_secs(0);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: because `Duration::from_secs(0)` is the minimum value for this type, this comparison is always false

error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> tests/ui/absurd-extreme-comparisons.rs:127:5
   |
LL |     Duration::from_secs(0) > d;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: because `Duration::from_secs(0)` is the minimum value for this type, this comparison is always false

error: aborting due to 34 previous errors

