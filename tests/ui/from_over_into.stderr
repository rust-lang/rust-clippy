error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true
  --> $DIR/from_over_into.rs:8:1
   |
LL | impl Into<StringWrapper> for String {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `-D clippy::from-over-into` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::from_over_into)]`
help: replace the `Into` implementation with `From<std::string::String>`
   |
LL ~ impl From<String> for StringWrapper {
LL ~     fn from(val: String) -> Self {
LL ~         StringWrapper(val)
   |

error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true
  --> $DIR/from_over_into.rs:16:1
   |
LL | impl Into<SelfType> for String {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: replace the `Into` implementation with `From<std::string::String>`
   |
LL ~ impl From<String> for SelfType {
LL ~     fn from(val: String) -> Self {
LL ~         SelfType(String::new())
   |

error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true
  --> $DIR/from_over_into.rs:31:1
   |
LL | impl Into<SelfKeywords> for X {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: replace the `Into` implementation with `From<X>`
   |
LL ~ impl From<X> for SelfKeywords {
LL ~     fn from(val: X) -> Self {
LL ~         let _ = X;
LL ~         let _ = X::FOO;
LL ~         let _: X = val;
   |

error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true
  --> $DIR/from_over_into.rs:43:1
   |
LL | impl core::convert::Into<bool> for crate::ExplicitPaths {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see
           https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence
help: replace the `Into` implementation with `From<ExplicitPaths>`
   |
LL ~ impl core::convert::From<crate::ExplicitPaths> for bool {
LL ~     fn from(mut val: crate::ExplicitPaths) -> Self {
LL ~         let in_closure = || val.0;
LL | 
LL ~         val.0 = false;
LL ~         val.0
   |

error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true
  --> $DIR/from_over_into.rs:63:1
   |
LL | impl Into<String> for PathInExpansion {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see
           https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence
help: replace the `Into` implementation with `From<PathInExpansion>`
   |
LL ~ impl From<PathInExpansion> for String {
LL ~     fn from(val: PathInExpansion) -> Self {
   |

error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true
  --> $DIR/from_over_into.rs:85:5
   |
LL |     impl<T> Into<FromOverInto<T>> for Vec<T> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: replace the `Into` implementation with `From<std::vec::Vec<T>>`
   |
LL ~     impl<T> From<Vec<T>> for FromOverInto<T> {
LL ~         fn from(val: Vec<T>) -> Self {
LL ~             FromOverInto(val)
   |

error: aborting due to 6 previous errors

