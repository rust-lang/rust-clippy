error: expression with side effects as the initial value in a zero-sized array initializer
  --> tests/ui/zero_repeat_side_effects.rs:22:5
   |
LL |     let a = [f(); 0];
   |     ^^^^^^^^^^^^^^^^^
   |
   = note: `-D clippy::zero-repeat-side-effects` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::zero_repeat_side_effects)]`
help: consider performing the side effect separately
   |
LL ~     f();
LL +     let a: [i32; 0] = [];
   |

error: expression with side effects as the initial value in a zero-sized array initializer
  --> tests/ui/zero_repeat_side_effects.rs:25:5
   |
LL |     b = [f(); 0];
   |     ^^^^^^^^^^^^
   |
help: consider performing the side effect separately
   |
LL ~     f();
LL ~     b = [] as [i32; 0];
   |

error: expression with side effects as the initial value in a zero-sized array initializer
  --> tests/ui/zero_repeat_side_effects.rs:30:5
   |
LL |     let c = vec![f(); 0];
   |     ^^^^^^^^^^^^^^^^^^^^^
   |
help: consider performing the side effect separately
   |
LL ~     f();
LL +     let c: std::vec::Vec<i32> = vec![];
   |

error: expression with side effects as the initial value in a zero-sized array initializer
  --> tests/ui/zero_repeat_side_effects.rs:33:5
   |
LL |     d = vec![f(); 0];
   |     ^^^^^^^^^^^^^^^^
   |
help: consider performing the side effect separately
   |
LL ~     f();
LL ~     d = vec![] as std::vec::Vec<i32>;
   |

error: expression with side effects as the initial value in a zero-sized array initializer
  --> tests/ui/zero_repeat_side_effects.rs:37:5
   |
LL |     let e = [println!("side effect"); 0];
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: consider performing the side effect separately
   |
LL ~     println!("side effect");
LL +     let e: [(); 0] = [];
   |

error: expression with side effects as the initial value in a zero-sized array initializer
  --> tests/ui/zero_repeat_side_effects.rs:41:5
   |
LL |     let g = [{ f() }; 0];
   |     ^^^^^^^^^^^^^^^^^^^^^
   |
help: consider performing the side effect separately
   |
LL ~     { f() };
LL +     let g: [i32; 0] = [];
   |

error: expression with side effects as the initial value in a zero-sized array initializer
  --> tests/ui/zero_repeat_side_effects.rs:45:10
   |
LL |     drop(vec![f(); 0]);
   |          ^^^^^^^^^^^^
   |
help: consider performing the side effect separately
   |
LL ~     drop({
LL +         f();
LL +         vec![] as std::vec::Vec<i32>
LL ~     });
   |

error: expression with side effects as the initial value in a zero-sized array initializer
  --> tests/ui/zero_repeat_side_effects.rs:49:5
   |
LL |     vec![f(); 0];
   |     ^^^^^^^^^^^^
   |
help: consider performing the side effect separately
   |
LL ~     f();
LL ~     vec![] as std::vec::Vec<i32>;
   |

error: expression with side effects as the initial value in a zero-sized array initializer
  --> tests/ui/zero_repeat_side_effects.rs:51:5
   |
LL |     [f(); 0];
   |     ^^^^^^^^
   |
help: consider performing the side effect separately
   |
LL ~     f();
LL ~     [] as [i32; 0];
   |

error: expression with side effects as the initial value in a zero-sized array initializer
  --> tests/ui/zero_repeat_side_effects.rs:105:10
   |
LL |     foo(&[Some(f()); 0]);
   |          ^^^^^^^^^^^^^^
   |
help: consider performing the side effect separately
   |
LL ~     foo(&{
LL +         Some(f());
LL +         [] as [std::option::Option<i32>; 0]
LL ~     });
   |

error: expression with side effects as the initial value in a zero-sized array initializer
  --> tests/ui/zero_repeat_side_effects.rs:107:10
   |
LL |     foo(&[Some(Some(S::new())); 0]);
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: consider performing the side effect separately
   |
LL ~     foo(&{
LL +         Some(Some(S::new()));
LL +         [] as [std::option::Option<std::option::Option<S>>; 0]
LL ~     });
   |

error: expression with side effects as the initial value in a zero-sized array initializer
  --> tests/ui/zero_repeat_side_effects.rs:115:14
   |
LL |         0 => _ = [f(); 0],
   |              ^^^^^^^^^^^^
   |
help: consider performing the side effect separately
   |
LL ~         0 => {
LL +             f();
LL +             _ = [] as [(); 0]
LL ~         },
   |

error: expression with side effects as the initial value in a zero-sized array initializer
  --> tests/ui/zero_repeat_side_effects.rs:122:14
   |
LL |         0 => a = [f(); 0],
   |              ^^^^^^^^^^^^
   |
help: consider performing the side effect separately
   |
LL ~         0 => {
LL +             f();
LL +             a = [] as [(); 0]
LL ~         },
   |

error: aborting due to 13 previous errors

