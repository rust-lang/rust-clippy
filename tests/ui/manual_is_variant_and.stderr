error: called `.map() == Ok()`
  --> tests/ui/manual_is_variant_and.rs:62:13
   |
LL |     let _ = res.map(|x| x != 0) == Ok(true);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `res.is_ok_and(|x| x != 0)`
   |
   = note: `-D clippy::manual-is-variant-and` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::manual_is_variant_and)]`

error: use of `option::Iter::any`
  --> tests/ui/manual_is_variant_and.rs:64:13
   |
LL |     let _ = res.into_iter().any(|x| x != 0);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `is_ok_and` instead
   |
LL -     let _ = res.into_iter().any(|x| x != 0);
LL +     let _ = res.is_ok_and(|x| x != 0);
   |

error: called `map(<f>).unwrap_or_default()` on an `Option` value
  --> tests/ui/manual_is_variant_and.rs:66:17
   |
LL |     let _ = opt.map(|x| x != 0).unwrap_or_default();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `is_some_and(|x| x != 0)`

error: use of `option::Iter::any`
  --> tests/ui/manual_is_variant_and.rs:69:13
   |
LL |     let _ = opt.iter().any(|&x| x != 0);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `is_some_and` instead
   |
LL -     let _ = opt.iter().any(|&x| x != 0);
LL +     let _ = opt.is_some_and(|x| x != 0);
   |

error: called `.map() == Ok()`
  --> tests/ui/manual_is_variant_and.rs:75:13
   |
LL |     let _ = res.map(|x| x != 0) == Ok(true);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `res.is_ok_and(|x| x != 0)`

error: use of `option::Iter::any`
  --> tests/ui/manual_is_variant_and.rs:77:13
   |
LL |     let _ = res.into_iter().any(|x| x != 0);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `is_ok_and` instead
   |
LL -     let _ = res.into_iter().any(|x| x != 0);
LL +     let _ = res.is_ok_and(|x| x != 0);
   |

error: called `map(<f>).unwrap_or_default()` on an `Option` value
  --> tests/ui/manual_is_variant_and.rs:79:17
   |
LL |     let _ = opt.map(|x| x != 0).unwrap_or_default();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `is_some_and(|x| x != 0)`

error: use of `option::Iter::any`
  --> tests/ui/manual_is_variant_and.rs:82:13
   |
LL |     let _ = opt.iter().any(|&x| x != 0);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `is_some_and` instead
   |
LL -     let _ = opt.iter().any(|&x| x != 0);
LL +     let _ = opt.is_some_and(|x| x != 0);
   |

error: called `.map() == Ok()`
  --> tests/ui/manual_is_variant_and.rs:88:13
   |
LL |     let _ = res.map(|x| x != 0) == Ok(true);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `res.is_ok_and(|x| x != 0)`

error: use of `option::Iter::any`
  --> tests/ui/manual_is_variant_and.rs:90:13
   |
LL |     let _ = res.into_iter().any(|x| x != 0);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `is_ok_and` instead
   |
LL -     let _ = res.into_iter().any(|x| x != 0);
LL +     let _ = res.is_ok_and(|x| x != 0);
   |

error: called `map(<f>).unwrap_or_default()` on an `Option` value
  --> tests/ui/manual_is_variant_and.rs:92:17
   |
LL |     let _ = opt.map(|x| x != 0).unwrap_or_default();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `is_some_and(|x| x != 0)`

error: use of `option::Iter::all`
  --> tests/ui/manual_is_variant_and.rs:94:13
   |
LL |     let _ = opt.iter().all(|x| *x != 0);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `is_none_or` instead
   |
LL -     let _ = opt.iter().all(|x| *x != 0);
LL +     let _ = opt.is_none_or(|x| x != 0);
   |

error: use of `option::Iter::any`
  --> tests/ui/manual_is_variant_and.rs:96:13
   |
LL |     let _ = opt.iter().any(|&x| x != 0);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `is_some_and` instead
   |
LL -     let _ = opt.iter().any(|&x| x != 0);
LL +     let _ = opt.is_some_and(|x| x != 0);
   |

error: called `map(<f>).unwrap_or_default()` on an `Option` value
  --> tests/ui/manual_is_variant_and.rs:107:17
   |
LL |       let _ = opt.map(|x| x > 1)
   |  _________________^
...  |
LL | |         .unwrap_or_default();
   | |____________________________^ help: use: `is_some_and(|x| x > 1)`

error: called `map(<f>).unwrap_or_default()` on an `Option` value
  --> tests/ui/manual_is_variant_and.rs:112:17
   |
LL |       let _ = opt.map(|x| {
   |  _________________^
LL | |
LL | |         x > 1
LL | |     }
LL | |     ).unwrap_or_default();
   | |_________________________^
   |
help: use
   |
LL ~     let _ = opt.is_some_and(|x| {
LL +
LL +         x > 1
LL ~     });
   |

error: called `map(<f>).unwrap_or_default()` on an `Option` value
  --> tests/ui/manual_is_variant_and.rs:117:17
   |
LL |     let _ = opt.map(|x| x > 1).unwrap_or_default();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `is_some_and(|x| x > 1)`

error: called `map(<f>).unwrap_or_default()` on an `Option` value
  --> tests/ui/manual_is_variant_and.rs:120:10
   |
LL |           .map(|x| x > 1)
   |  __________^
LL | |
LL | |         .unwrap_or_default();
   | |____________________________^ help: use: `is_some_and(|x| x > 1)`

error: called `.map() == Some()`
  --> tests/ui/manual_is_variant_and.rs:124:13
   |
LL |     let _ = Some(2).map(|x| x % 2 == 0) == Some(true);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `Some(2).is_some_and(|x| x % 2 == 0)`

error: called `.map() != Some()`
  --> tests/ui/manual_is_variant_and.rs:126:13
   |
LL |     let _ = Some(2).map(|x| x % 2 == 0) != Some(true);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `Some(2).is_none_or(|x| x % 2 != 0)`

error: called `.map() == Some()`
  --> tests/ui/manual_is_variant_and.rs:128:13
   |
LL |     let _ = Some(2).map(|x| x % 2 == 0) == some_true!();
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `Some(2).is_some_and(|x| x % 2 == 0)`

error: called `.map() != Some()`
  --> tests/ui/manual_is_variant_and.rs:130:13
   |
LL |     let _ = Some(2).map(|x| x % 2 == 0) != some_false!();
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `Some(2).is_none_or(|x| x % 2 == 0)`

error: use of `option::Iter::all`
  --> tests/ui/manual_is_variant_and.rs:132:13
   |
LL |     let _ = opt.into_iter().all(|x| x != 0);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `is_none_or` instead
   |
LL -     let _ = opt.into_iter().all(|x| x != 0);
LL +     let _ = opt.is_none_or(|x| x != 0);
   |

error: use of `option::Iter::all`
  --> tests/ui/manual_is_variant_and.rs:134:13
   |
LL |     let _ = (opt.into_iter()).all(|x| x != 0);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `is_none_or` instead
   |
LL -     let _ = (opt.into_iter()).all(|x| x != 0);
LL +     let _ = (opt).is_none_or(|x| x != 0);
   |

error: use of `option::Iter::any`
  --> tests/ui/manual_is_variant_and.rs:136:13
   |
LL |     let _ = opt.into_iter().any(i32::is_negative);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `is_some_and` instead
   |
LL -     let _ = opt.into_iter().any(i32::is_negative);
LL +     let _ = opt.is_some_and(i32::is_negative);
   |

error: use of `option::Iter::any`
  --> tests/ui/manual_is_variant_and.rs:138:13
   |
LL |     let _ = opt.into_iter().any(|x| x != 0);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `is_some_and` instead
   |
LL -     let _ = opt.into_iter().any(|x| x != 0);
LL +     let _ = opt.is_some_and(|x| x != 0);
   |

error: use of `option::Iter::any`
  --> tests/ui/manual_is_variant_and.rs:142:13
   |
LL |     let _ = (opt_non_copy.iter()).any(|x| x.is_empty());
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `is_some_and` instead
   |
LL -     let _ = (opt_non_copy.iter()).any(|x| x.is_empty());
LL +     let _ = (opt_non_copy).as_ref().is_some_and(|x| x.is_empty());
   |

error: use of `option::Iter::any`
  --> tests/ui/manual_is_variant_and.rs:144:13
   |
LL |     let _ = opt_non_copy.iter().any(|x| x.is_empty());
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `is_some_and` instead
   |
LL -     let _ = opt_non_copy.iter().any(|x| x.is_empty());
LL +     let _ = opt_non_copy.as_ref().is_some_and(|x| x.is_empty());
   |

error: use of `option::Iter::any`
  --> tests/ui/manual_is_variant_and.rs:146:13
   |
LL |     let _ = opt_non_copy.iter().any(|x| ".." == *x);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `is_some_and` instead
   |
LL -     let _ = opt_non_copy.iter().any(|x| ".." == *x);
LL +     let _ = opt_non_copy.as_ref().is_some_and(|x| ".." == *x);
   |

error: use of `option::Iter::all`
  --> tests/ui/manual_is_variant_and.rs:149:13
   |
LL |     let _ = opt.iter().all(|x| *x != 0);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `is_none_or` instead
   |
LL -     let _ = opt.iter().all(|x| *x != 0);
LL +     let _ = opt.is_none_or(|x| x != 0);
   |

error: use of `option::Iter::all`
  --> tests/ui/manual_is_variant_and.rs:151:13
   |
LL |     let _ = opt.iter().all(|_| false);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `is_none_or` instead
   |
LL -     let _ = opt.iter().all(|_| false);
LL +     let _ = opt.as_ref().is_none_or(|_| false);
   |

error: use of `option::Iter::any`
  --> tests/ui/manual_is_variant_and.rs:153:13
   |
LL |     let _ = opt.iter().any(|&x| x != 0);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `is_some_and` instead
   |
LL -     let _ = opt.iter().any(|&x| x != 0);
LL +     let _ = opt.is_some_and(|x| x != 0);
   |

error: use of `option::Iter::all`
  --> tests/ui/manual_is_variant_and.rs:155:13
   |
LL |     let _ = opt.iter().all(|&_| false);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `is_none_or` instead
   |
LL -     let _ = opt.iter().all(|&_| false);
LL +     let _ = opt.is_none_or(|_| false);
   |

error: use of `option::Iter::all`
  --> tests/ui/manual_is_variant_and.rs:160:13
   |
LL |     let _ = opt.iter().all(zerop);
   |             ^^^^^^^^^^^^^^^^^^^^^
   |
help: use `is_none_or` instead
   |
LL -     let _ = opt.iter().all(zerop);
LL +     let _ = opt.as_ref().is_none_or(zerop);
   |

error: called `map(<f>).unwrap_or_default()` on an `Option` value
  --> tests/ui/manual_is_variant_and.rs:167:18
   |
LL |     let _ = opt2.map(char::is_alphanumeric).unwrap_or_default(); // should lint
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `is_some_and(char::is_alphanumeric)`

error: called `map(<f>).unwrap_or_default()` on a `Result` value
  --> tests/ui/manual_is_variant_and.rs:188:17
   |
LL |       let _ = res.map(|x| {
   |  _________________^
LL | |
LL | |         x > 1
LL | |     }
LL | |     ).unwrap_or_default();
   | |_________________________^
   |
help: use
   |
LL ~     let _ = res.is_ok_and(|x| {
LL +
LL +         x > 1
LL ~     });
   |

error: called `map(<f>).unwrap_or_default()` on a `Result` value
  --> tests/ui/manual_is_variant_and.rs:193:17
   |
LL |       let _ = res.map(|x| x > 1)
   |  _________________^
LL | |
LL | |         .unwrap_or_default();
   | |____________________________^ help: use: `is_ok_and(|x| x > 1)`

error: called `.map() == Ok()`
  --> tests/ui/manual_is_variant_and.rs:197:13
   |
LL |     let _ = Ok::<usize, ()>(2).map(|x| x.is_multiple_of(2)) == Ok(true);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `Ok::<usize, ()>(2).is_ok_and(|x| x.is_multiple_of(2))`

error: called `.map() != Ok()`
  --> tests/ui/manual_is_variant_and.rs:199:13
   |
LL |     let _ = Ok::<usize, ()>(2).map(|x| x.is_multiple_of(2)) != Ok(true);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `!Ok::<usize, ()>(2).is_ok_and(|x| x.is_multiple_of(2))`

error: called `.map() != Ok()`
  --> tests/ui/manual_is_variant_and.rs:201:13
   |
LL |     let _ = Ok::<usize, ()>(2).map(|x| x.is_multiple_of(2)) != Ok(true);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `!Ok::<usize, ()>(2).is_ok_and(|x| x.is_multiple_of(2))`

error: use of `option::Iter::any`
  --> tests/ui/manual_is_variant_and.rs:203:13
   |
LL |     let _ = res.into_iter().any(i32::is_negative);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `is_ok_and` instead
   |
LL -     let _ = res.into_iter().any(i32::is_negative);
LL +     let _ = res.is_ok_and(i32::is_negative);
   |

error: use of `option::Iter::any`
  --> tests/ui/manual_is_variant_and.rs:205:13
   |
LL |     let _ = res_non_copy.iter().any(|x| *x != 0);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `is_ok_and` instead
   |
LL -     let _ = res_non_copy.iter().any(|x| *x != 0);
LL +     let _ = res_non_copy.as_ref().is_ok_and(|x| *x != 0);
   |

error: use of `option::Iter::any`
  --> tests/ui/manual_is_variant_and.rs:207:13
   |
LL |     let _ = res.iter().any(|x| *x != 0);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `is_ok_and` instead
   |
LL -     let _ = res.iter().any(|x| *x != 0);
LL +     let _ = res.is_ok_and(|x| x != 0);
   |

error: called `map(<f>).unwrap_or_default()` on a `Result` value
  --> tests/ui/manual_is_variant_and.rs:214:18
   |
LL |     let _ = res2.map(char::is_alphanumeric).unwrap_or_default(); // should lint
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `is_ok_and(char::is_alphanumeric)`

error: called `.map() != Some()`
  --> tests/ui/manual_is_variant_and.rs:231:18
   |
LL |         let a1 = x.map(|b| b.is_ascii_digit()) != Some(true);
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `x.is_none_or(|b| !b.is_ascii_digit())`

error: called `.map() != Some()`
  --> tests/ui/manual_is_variant_and.rs:238:18
   |
LL |         let a1 = x.map(|b| b.is_ascii_digit()) != Some(false);
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `x.is_none_or(|b| b.is_ascii_digit())`

error: called `.map() == Some()`
  --> tests/ui/manual_is_variant_and.rs:245:18
   |
LL |         let a1 = x.map(|b| b.is_ascii_digit()) == Some(true);
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `x.is_some_and(|b| b.is_ascii_digit())`

error: called `.map() == Some()`
  --> tests/ui/manual_is_variant_and.rs:252:18
   |
LL |         let a1 = x.map(|b| b.is_ascii_digit()) == Some(false);
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `x.is_some_and(|b| !b.is_ascii_digit())`

error: called `.map() != Ok()`
  --> tests/ui/manual_is_variant_and.rs:260:18
   |
LL |         let a1 = x.map(|b| b.is_ascii_digit()) != Ok(true);
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `!x.is_ok_and(|b| b.is_ascii_digit())`

error: called `.map() != Ok()`
  --> tests/ui/manual_is_variant_and.rs:267:18
   |
LL |         let a1 = x.map(|b| b.is_ascii_digit()) != Ok(false);
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `!x.is_ok_and(|b| !b.is_ascii_digit())`

error: called `.map() == Ok()`
  --> tests/ui/manual_is_variant_and.rs:274:18
   |
LL |         let a1 = x.map(|b| b.is_ascii_digit()) == Ok(true);
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `x.is_ok_and(|b| b.is_ascii_digit())`

error: called `.map() == Ok()`
  --> tests/ui/manual_is_variant_and.rs:281:18
   |
LL |         let a1 = x.map(|b| b.is_ascii_digit()) == Ok(false);
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `x.is_ok_and(|b| !b.is_ascii_digit())`

error: called `.map() == Some()`
  --> tests/ui/manual_is_variant_and.rs:294:18
   |
LL |         let a1 = b.map(iad) == Some(true);
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `b.is_some_and(iad)`

error: called `.map() == Some()`
  --> tests/ui/manual_is_variant_and.rs:299:18
   |
LL |         let a1 = b.map(iad) == Some(false);
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `b.is_some_and(|x| !iad(x))`

error: called `.map() != Some()`
  --> tests/ui/manual_is_variant_and.rs:304:18
   |
LL |         let a1 = b.map(iad) != Some(true);
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `b.is_none_or(|x| !iad(x))`

error: called `.map() != Some()`
  --> tests/ui/manual_is_variant_and.rs:309:18
   |
LL |         let a1 = b.map(iad) != Some(false);
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `b.is_none_or(iad)`

error: called `.map() == Ok()`
  --> tests/ui/manual_is_variant_and.rs:316:18
   |
LL |         let a1 = b.map(iad) == Ok(true);
   |                  ^^^^^^^^^^^^^^^^^^^^^^ help: use: `b.is_ok_and(iad)`

error: called `.map() == Ok()`
  --> tests/ui/manual_is_variant_and.rs:321:18
   |
LL |         let a1 = b.map(iad) == Ok(false);
   |                  ^^^^^^^^^^^^^^^^^^^^^^^ help: use: `b.is_ok_and(|x| !iad(x))`

error: called `.map() != Ok()`
  --> tests/ui/manual_is_variant_and.rs:326:18
   |
LL |         let a1 = b.map(iad) != Ok(true);
   |                  ^^^^^^^^^^^^^^^^^^^^^^ help: use: `!b.is_ok_and(iad)`

error: called `.map() != Ok()`
  --> tests/ui/manual_is_variant_and.rs:331:18
   |
LL |         let a1 = b.map(iad) != Ok(false);
   |                  ^^^^^^^^^^^^^^^^^^^^^^^ help: use: `!b.is_ok_and(|x| !iad(x))`

error: aborting due to 59 previous errors

