error: replacing an `Option` with `None`
  --> $DIR/mem_replace.rs:14:13
   |
LL |     let _ = mem::replace(&mut an_option, None);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `an_option.take()`
   |
   = note: `-D clippy::mem-replace-option-with-none` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::mem_replace_option_with_none)]`

error: replacing an `Option` with `None`
  --> $DIR/mem_replace.rs:16:13
   |
LL |     let _ = mem::replace(an_option, None);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `an_option.take()`

error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`
  --> $DIR/mem_replace.rs:21:13
   |
LL |     let _ = std::mem::replace(&mut s, String::default());
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut s)`
   |
   = note: `-D clippy::mem-replace-with-default` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::mem_replace_with_default)]`

error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`
  --> $DIR/mem_replace.rs:24:13
   |
LL |     let _ = std::mem::replace(s, String::default());
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(s)`

error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`
  --> $DIR/mem_replace.rs:25:13
   |
LL |     let _ = std::mem::replace(s, Default::default());
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(s)`

error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`
  --> $DIR/mem_replace.rs:28:13
   |
LL |     let _ = std::mem::replace(&mut v, Vec::default());
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut v)`

error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`
  --> $DIR/mem_replace.rs:29:13
   |
LL |     let _ = std::mem::replace(&mut v, Default::default());
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut v)`

error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`
  --> $DIR/mem_replace.rs:30:13
   |
LL |     let _ = std::mem::replace(&mut v, Vec::new());
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut v)`

error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`
  --> $DIR/mem_replace.rs:31:13
   |
LL |     let _ = std::mem::replace(&mut v, vec![]);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut v)`

error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`
  --> $DIR/mem_replace.rs:34:13
   |
LL |     let _ = std::mem::replace(&mut hash_map, HashMap::new());
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut hash_map)`

error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`
  --> $DIR/mem_replace.rs:37:13
   |
LL |     let _ = std::mem::replace(&mut btree_map, BTreeMap::new());
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut btree_map)`

error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`
  --> $DIR/mem_replace.rs:40:13
   |
LL |     let _ = std::mem::replace(&mut vd, VecDeque::new());
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut vd)`

error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`
  --> $DIR/mem_replace.rs:43:13
   |
LL |     let _ = std::mem::replace(&mut hash_set, HashSet::new());
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut hash_set)`

error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`
  --> $DIR/mem_replace.rs:46:13
   |
LL |     let _ = std::mem::replace(&mut btree_set, BTreeSet::new());
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut btree_set)`

error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`
  --> $DIR/mem_replace.rs:49:13
   |
LL |     let _ = std::mem::replace(&mut list, LinkedList::new());
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut list)`

error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`
  --> $DIR/mem_replace.rs:52:13
   |
LL |     let _ = std::mem::replace(&mut binary_heap, BinaryHeap::new());
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut binary_heap)`

error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`
  --> $DIR/mem_replace.rs:55:13
   |
LL |     let _ = std::mem::replace(&mut tuple, (vec![], BinaryHeap::new()));
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut tuple)`

error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`
  --> $DIR/mem_replace.rs:58:13
   |
LL |     let _ = std::mem::replace(&mut refstr, "");
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut refstr)`

error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`
  --> $DIR/mem_replace.rs:61:13
   |
LL |     let _ = std::mem::replace(&mut slice, &[]);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut slice)`

error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`
  --> $DIR/mem_replace.rs:89:13
   |
LL |     let _ = std::mem::replace(&mut s, String::default());
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut s)`

error: replacing an `Option` with `None`
  --> $DIR/mem_replace.rs:119:13
   |
LL |     let _ = std::mem::replace(&mut f.0, None);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `f.0.take()`

error: replacing an `Option` with `None`
  --> $DIR/mem_replace.rs:120:13
   |
LL |     let _ = std::mem::replace(&mut *f, None);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `(*f).take()`

error: replacing an `Option` with `None`
  --> $DIR/mem_replace.rs:121:13
   |
LL |     let _ = std::mem::replace(&mut b.opt, None);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `b.opt.take()`

error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`
  --> $DIR/mem_replace.rs:123:13
   |
LL |     let _ = std::mem::replace(&mut b.val, String::default());
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut b.val)`

error: aborting due to 24 previous errors

