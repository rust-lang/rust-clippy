error: match expression looks like `matches!` macro
  --> tests/ui/match_like_matches_macro.rs:13:14
   |
LL |       let _y = match x {
   |  ______________^
LL | |         Some(0) => true,
LL | |         _ => false,
LL | |     };
   | |_____^
   |
   = note: `-D clippy::match-like-matches-macro` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::match_like_matches_macro)]`
help: use `matches!` directly
   |
LL -     let _y = match x {
LL -         Some(0) => true,
LL -         _ => false,
LL -     };
LL +     let _y = matches!(x, Some(0));
   |

error: redundant pattern matching, consider using `is_some()`
  --> tests/ui/match_like_matches_macro.rs:20:14
   |
LL |       let _w = match x {
   |  ______________^
LL | |         Some(_) => true,
LL | |         _ => false,
LL | |     };
   | |_____^ help: try: `x.is_some()`
   |
   = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::redundant_pattern_matching)]`

error: redundant pattern matching, consider using `is_none()`
  --> tests/ui/match_like_matches_macro.rs:27:14
   |
LL |       let _z = match x {
   |  ______________^
LL | |         Some(_) => false,
LL | |         None => true,
LL | |     };
   | |_____^ help: try: `x.is_none()`

error: match expression looks like `matches!` macro
  --> tests/ui/match_like_matches_macro.rs:34:15
   |
LL |       let _zz = match x {
   |  _______________^
LL | |         Some(r) if r == 0 => false,
LL | |         _ => true,
LL | |     };
   | |_____^
   |
help: use `matches!` directly
   |
LL -     let _zz = match x {
LL -         Some(r) if r == 0 => false,
LL -         _ => true,
LL -     };
LL +     let _zz = !matches!(x, Some(r) if r == 0);
   |

error: `if let .. else` expression looks like `matches!` macro
  --> tests/ui/match_like_matches_macro.rs:41:16
   |
LL |     let _zzz = if let Some(5) = x { true } else { false };
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: use `matches!` directly
   |
LL -     let _zzz = if let Some(5) = x { true } else { false };
LL +     let _zzz = matches!(x, Some(5));
   |

error: match expression looks like `matches!` macro
  --> tests/ui/match_like_matches_macro.rs:66:20
   |
LL |           let _ans = match x {
   |  ____________________^
LL | |             E::A(_) => true,
LL | |             E::B(_) => true,
LL | |             _ => false,
LL | |         };
   | |_________^
   |
help: use `matches!` directly
   |
LL -         let _ans = match x {
LL -             E::A(_) => true,
LL -             E::B(_) => true,
LL -             _ => false,
LL -         };
LL +         let _ans = matches!(x, E::A(_) | E::B(_));
   |

error: match expression looks like `matches!` macro
  --> tests/ui/match_like_matches_macro.rs:77:20
   |
LL |           let _ans = match x {
   |  ____________________^
LL | |             E::A(_) => {
LL | |                 true
...  |
LL | |             _ => false,
LL | |         };
   | |_________^
   |
help: use `matches!` directly
   |
LL -         let _ans = match x {
LL -             E::A(_) => {
LL -                 true
LL -             }
LL -             E::B(_) => true,
LL -             _ => false,
LL -         };
LL +         let _ans = matches!(x, E::A(_) | E::B(_));
   |

error: match expression looks like `matches!` macro
  --> tests/ui/match_like_matches_macro.rs:88:20
   |
LL |           let _ans = match x {
   |  ____________________^
LL | |             E::B(_) => false,
LL | |             E::C => false,
LL | |             _ => true,
LL | |         };
   | |_________^
   |
help: use `matches!` directly
   |
LL -         let _ans = match x {
LL -             E::B(_) => false,
LL -             E::C => false,
LL -             _ => true,
LL -         };
LL +         let _ans = !matches!(x, E::B(_) | E::C);
   |

error: match expression looks like `matches!` macro
  --> tests/ui/match_like_matches_macro.rs:149:18
   |
LL |           let _z = match &z {
   |  __________________^
LL | |             Some(3) => true,
LL | |             _ => false,
LL | |         };
   | |_________^
   |
help: use `matches!` directly
   |
LL -         let _z = match &z {
LL -             Some(3) => true,
LL -             _ => false,
LL -         };
LL +         let _z = matches!(z, Some(3));
   |

error: match expression looks like `matches!` macro
  --> tests/ui/match_like_matches_macro.rs:159:18
   |
LL |           let _z = match &z {
   |  __________________^
LL | |             Some(3) => true,
LL | |             _ => false,
LL | |         };
   | |_________^
   |
help: use `matches!` directly
   |
LL -         let _z = match &z {
LL -             Some(3) => true,
LL -             _ => false,
LL -         };
LL +         let _z = matches!(&z, Some(3));
   |

error: match expression looks like `matches!` macro
  --> tests/ui/match_like_matches_macro.rs:177:21
   |
LL |               let _ = match &z {
   |  _____________________^
LL | |                 AnEnum::X => true,
LL | |                 _ => false,
LL | |             };
   | |_____________^
   |
help: use `matches!` directly
   |
LL -             let _ = match &z {
LL -                 AnEnum::X => true,
LL -                 _ => false,
LL -             };
LL +             let _ = matches!(&z, AnEnum::X);
   |

error: match expression looks like `matches!` macro
  --> tests/ui/match_like_matches_macro.rs:192:20
   |
LL |           let _res = match &val {
   |  ____________________^
LL | |             &Some(ref _a) => true,
LL | |             _ => false,
LL | |         };
   | |_________^
   |
help: use `matches!` directly
   |
LL -         let _res = match &val {
LL -             &Some(ref _a) => true,
LL -             _ => false,
LL -         };
LL +         let _res = matches!(&val, &Some(ref _a));
   |

error: match expression looks like `matches!` macro
  --> tests/ui/match_like_matches_macro.rs:205:20
   |
LL |           let _res = match &val {
   |  ____________________^
LL | |             &Some(ref _a) => true,
LL | |             _ => false,
LL | |         };
   | |_________^
   |
help: use `matches!` directly
   |
LL -         let _res = match &val {
LL -             &Some(ref _a) => true,
LL -             _ => false,
LL -         };
LL +         let _res = matches!(&val, &Some(ref _a));
   |

error: match expression looks like `matches!` macro
  --> tests/ui/match_like_matches_macro.rs:264:14
   |
LL |       let _y = match Some(5) {
   |  ______________^
LL | |         Some(0) => true,
LL | |         _ => false,
LL | |     };
   | |_____^
   |
help: use `matches!` directly
   |
LL -     let _y = match Some(5) {
LL -         Some(0) => true,
LL -         _ => false,
LL -     };
LL +     let _y = matches!(Some(5), Some(0));
   |

error: match expression looks like `matches!` macro
  --> tests/ui/match_like_matches_macro.rs:274:13
   |
LL |       let _ = match opt {
   |  _____________^
LL | |         Some(first) if (if let Some(second) = first { true } else { todo!() }) => true,
LL | |         _ => false,
LL | |     };
   | |_____^
   |
help: use `matches!` directly
   |
LL -     let _ = match opt {
LL -         Some(first) if (if let Some(second) = first { true } else { todo!() }) => true,
LL -         _ => false,
LL -     };
LL +     let _ = matches!(opt, Some(first) if (if let Some(second) = first { true } else { todo!() }));
   |

error: aborting due to 15 previous errors

