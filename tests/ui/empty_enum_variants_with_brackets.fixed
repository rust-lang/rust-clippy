//@aux-build:proc_macros.rs
#![deny(clippy::empty_enum_variants_with_brackets)]
#![allow(dead_code)]

extern crate proc_macros;
use proc_macros::{external, with_span};

pub enum PublicTestEnum {
    NonEmptyBraces { x: i32, y: i32 },
    NonEmptyParentheses(i32, i32),
    EmptyBraces, //~ empty_enum_variants_with_brackets
    EmptyParentheses(),
}

enum TestEnum {
    NonEmptyBraces { x: i32, y: i32 },
    NonEmptyParentheses(i32, i32),
    EmptyBraces,     //~ empty_enum_variants_with_brackets
    EmptyParentheses, //~ empty_enum_variants_with_brackets
    AnotherEnum,
}

enum TestEnumWithFeatures {
    NonEmptyBraces {
        #[cfg(feature = "thisisneverenabled")]
        x: i32,
    },
    NonEmptyParentheses(#[cfg(feature = "thisisneverenabled")] i32),
}

external! {
    enum External {
        Foo {},
    }
}

with_span! {
    span
    enum ProcMacro {
        Foo(),
    }
}

macro_rules! m {
    ($($ty:ty),*) => {
        enum Macro {
            Foo($($ty),*),
        }
    }
}

mod issue12551 {
    // Check if the variant is passed as an argument.
    enum EvenOdd {
        Even(),
        Odd(),
        Unknown, //~ empty_enum_variants_with_brackets
    }
    fn even_odd(x: i32) -> EvenOdd {
        (x % 2 == 0).then(EvenOdd::Even).unwrap_or_else(EvenOdd::Odd)
    }

    fn natural_number(x: i32) -> NaturalOrNot {
        (x > 0)
            .then(NaturalOrNot::Natural)
            .unwrap_or_else(NaturalOrNot::NotNatural)
    }
    enum NaturalOrNot {
        Natural(),
        NotNatural(),
        Unknown, //~ empty_enum_variants_with_brackets
    }

    // Check that call sites are fixed.
    enum RedundantParenthesesFunctionCall {
        Parentheses, //~ empty_enum_variants_with_brackets
        NoParentheses,
    }
    fn redundant_parentheses_function_call() {
        let _ = RedundantParenthesesFunctionCall::Parentheses;
        let _ = RedundantParenthesesFunctionCall::NoParentheses;
    }

    fn redundant_parentheses_function_call_2() {
        let _ = RedundantParenthesesFunctionCall2::Parentheses;
        let _ = RedundantParenthesesFunctionCall2::NoParentheses;
    }
    enum RedundantParenthesesFunctionCall2 {
        Parentheses, //~ empty_enum_variants_with_brackets
        NoParentheses,
    }
}

fn main() {}
