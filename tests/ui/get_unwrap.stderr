error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise
  --> $DIR/get_unwrap.rs:37:17
   |
LL |         let _ = boxed_slice.get(1).unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&boxed_slice[1]`
   |
note: the lint level is defined here
  --> $DIR/get_unwrap.rs:9:9
   |
LL | #![deny(clippy::get_unwrap)]
   |         ^^^^^^^^^^^^^^^^^^

error: used `unwrap()` on an `Option` value
  --> $DIR/get_unwrap.rs:37:17
   |
LL |         let _ = boxed_slice.get(1).unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: if this value is `None`, it will panic
   = help: consider using `expect()` to provide a better panic message
   = note: `-D clippy::unwrap-used` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::unwrap_used)]`

error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise
  --> $DIR/get_unwrap.rs:38:17
   |
LL |         let _ = some_slice.get(0).unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&some_slice[0]`

error: used `unwrap()` on an `Option` value
  --> $DIR/get_unwrap.rs:38:17
   |
LL |         let _ = some_slice.get(0).unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: if this value is `None`, it will panic
   = help: consider using `expect()` to provide a better panic message

error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise
  --> $DIR/get_unwrap.rs:39:17
   |
LL |         let _ = some_vec.get(0).unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&some_vec[0]`

error: used `unwrap()` on an `Option` value
  --> $DIR/get_unwrap.rs:39:17
   |
LL |         let _ = some_vec.get(0).unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: if this value is `None`, it will panic
   = help: consider using `expect()` to provide a better panic message

error: called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more concise
  --> $DIR/get_unwrap.rs:40:17
   |
LL |         let _ = some_vecdeque.get(0).unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&some_vecdeque[0]`

error: used `unwrap()` on an `Option` value
  --> $DIR/get_unwrap.rs:40:17
   |
LL |         let _ = some_vecdeque.get(0).unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: if this value is `None`, it will panic
   = help: consider using `expect()` to provide a better panic message

error: called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise
  --> $DIR/get_unwrap.rs:41:17
   |
LL |         let _ = some_hashmap.get(&1).unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&some_hashmap[&1]`

error: used `unwrap()` on an `Option` value
  --> $DIR/get_unwrap.rs:41:17
   |
LL |         let _ = some_hashmap.get(&1).unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: if this value is `None`, it will panic
   = help: consider using `expect()` to provide a better panic message

error: called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise
  --> $DIR/get_unwrap.rs:42:17
   |
LL |         let _ = some_btreemap.get(&1).unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&some_btreemap[&1]`

error: used `unwrap()` on an `Option` value
  --> $DIR/get_unwrap.rs:42:17
   |
LL |         let _ = some_btreemap.get(&1).unwrap();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: if this value is `None`, it will panic
   = help: consider using `expect()` to provide a better panic message

error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise
  --> $DIR/get_unwrap.rs:46:21
   |
LL |         let _: u8 = *boxed_slice.get(1).unwrap();
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `boxed_slice[1]`

error: used `unwrap()` on an `Option` value
  --> $DIR/get_unwrap.rs:46:22
   |
LL |         let _: u8 = *boxed_slice.get(1).unwrap();
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: if this value is `None`, it will panic
   = help: consider using `expect()` to provide a better panic message

error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise
  --> $DIR/get_unwrap.rs:51:9
   |
LL |         *boxed_slice.get_mut(0).unwrap() = 1;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `boxed_slice[0]`

error: used `unwrap()` on an `Option` value
  --> $DIR/get_unwrap.rs:51:10
   |
LL |         *boxed_slice.get_mut(0).unwrap() = 1;
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: if this value is `None`, it will panic
   = help: consider using `expect()` to provide a better panic message

error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise
  --> $DIR/get_unwrap.rs:52:9
   |
LL |         *some_slice.get_mut(0).unwrap() = 1;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `some_slice[0]`

error: used `unwrap()` on an `Option` value
  --> $DIR/get_unwrap.rs:52:10
   |
LL |         *some_slice.get_mut(0).unwrap() = 1;
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: if this value is `None`, it will panic
   = help: consider using `expect()` to provide a better panic message

error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise
  --> $DIR/get_unwrap.rs:53:9
   |
LL |         *some_vec.get_mut(0).unwrap() = 1;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `some_vec[0]`

error: used `unwrap()` on an `Option` value
  --> $DIR/get_unwrap.rs:53:10
   |
LL |         *some_vec.get_mut(0).unwrap() = 1;
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: if this value is `None`, it will panic
   = help: consider using `expect()` to provide a better panic message

error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise
  --> $DIR/get_unwrap.rs:54:9
   |
LL |         *some_vecdeque.get_mut(0).unwrap() = 1;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `some_vecdeque[0]`

error: used `unwrap()` on an `Option` value
  --> $DIR/get_unwrap.rs:54:10
   |
LL |         *some_vecdeque.get_mut(0).unwrap() = 1;
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: if this value is `None`, it will panic
   = help: consider using `expect()` to provide a better panic message

error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise
  --> $DIR/get_unwrap.rs:66:17
   |
LL |         let _ = some_vec.get(0..1).unwrap().to_vec();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `some_vec[0..1]`

error: used `unwrap()` on an `Option` value
  --> $DIR/get_unwrap.rs:66:17
   |
LL |         let _ = some_vec.get(0..1).unwrap().to_vec();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: if this value is `None`, it will panic
   = help: consider using `expect()` to provide a better panic message

error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise
  --> $DIR/get_unwrap.rs:67:17
   |
LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `some_vec[0..1]`

error: used `unwrap()` on an `Option` value
  --> $DIR/get_unwrap.rs:67:17
   |
LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: if this value is `None`, it will panic
   = help: consider using `expect()` to provide a better panic message

error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise
  --> $DIR/get_unwrap.rs:77:24
   |
LL |         let _x: &i32 = f.get(1 + 2).unwrap();
   |                        ^^^^^^^^^^^^^^^^^^^^^ help: try: `&f[1 + 2]`

error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise
  --> $DIR/get_unwrap.rs:80:18
   |
LL |         let _x = f.get(1 + 2).unwrap().to_string();
   |                  ^^^^^^^^^^^^^^^^^^^^^ help: try: `f[1 + 2]`

error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise
  --> $DIR/get_unwrap.rs:83:18
   |
LL |         let _x = f.get(1 + 2).unwrap().abs();
   |                  ^^^^^^^^^^^^^^^^^^^^^ help: try: `f[1 + 2]`

error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise
  --> $DIR/get_unwrap.rs:100:33
   |
LL |                         let b = rest.get_mut(linidx(j, k) - linidx(i, k) - 1).unwrap();
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut rest[linidx(j, k) - linidx(i, k) - 1]`

error: aborting due to 30 previous errors

