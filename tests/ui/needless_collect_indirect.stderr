error: avoid using `collect()` when not needed
  --> $DIR/needless_collect_indirect.rs:6:39
   |
LL |     let indirect_iter = sample.iter().collect::<Vec<_>>();
   |                                       ^^^^^^^
LL |     indirect_iter.into_iter().map(|x| (x, x + 1)).collect::<HashMap<_, _>>();
   |     ------------------------- the iterator could be used here instead
   |
   = note: `-D clippy::needless-indirect-collect` implied by `-D warnings`
help: use the original Iterator instead of collecting it and then producing a new one
   |
LL ~     
LL ~     sample.iter().map(|x| (x, x + 1)).collect::<HashMap<_, _>>();
   |

error: avoid using `collect()` when not needed
  --> $DIR/needless_collect_indirect.rs:8:38
   |
LL |     let indirect_len = sample.iter().collect::<VecDeque<_>>();
   |                                      ^^^^^^^
LL |     indirect_len.len();
   |     ------------------ the iterator could be used here instead
   |
help: take the original Iterator's count instead of collecting it and finding the length
   |
LL ~     
LL ~     sample.iter().count();
   |

error: avoid using `collect()` when not needed
  --> $DIR/needless_collect_indirect.rs:10:40
   |
LL |     let indirect_empty = sample.iter().collect::<VecDeque<_>>();
   |                                        ^^^^^^^
LL |     indirect_empty.is_empty();
   |     ------------------------- the iterator could be used here instead
   |
help: check if the original Iterator has anything instead of collecting it and seeing if it's empty
   |
LL ~     
LL ~     sample.iter().next().is_none();
   |

error: avoid using `collect()` when not needed
  --> $DIR/needless_collect_indirect.rs:12:43
   |
LL |     let indirect_contains = sample.iter().collect::<VecDeque<_>>();
   |                                           ^^^^^^^
LL |     indirect_contains.contains(&&5);
   |     ------------------------------- the iterator could be used here instead
   |
help: check if the original Iterator contains an element instead of collecting then checking
   |
LL ~     
LL ~     sample.iter().any(|x| x == &5);
   |

error: avoid using `collect()` when not needed
  --> $DIR/needless_collect_indirect.rs:24:48
   |
LL |     let non_copy_contains = sample.into_iter().collect::<Vec<_>>();
   |                                                ^^^^^^^
LL |     non_copy_contains.contains(&a);
   |     ------------------------------ the iterator could be used here instead
   |
help: check if the original Iterator contains an element instead of collecting then checking
   |
LL ~     
LL ~     sample.into_iter().any(|x| x == a);
   |

error: avoid using `collect()` when not needed
  --> $DIR/needless_collect_indirect.rs:53:51
   |
LL |         let buffer: Vec<&str> = string.split('/').collect();
   |                                                   ^^^^^^^
LL |         buffer.len()
   |         ------------ the iterator could be used here instead
   |
help: take the original Iterator's count instead of collecting it and finding the length
   |
LL ~         
LL ~         string.split('/').count()
   |

error: avoid using `collect()` when not needed
  --> $DIR/needless_collect_indirect.rs:58:55
   |
LL |         let indirect_len: VecDeque<_> = sample.iter().collect();
   |                                                       ^^^^^^^
LL |         indirect_len.len()
   |         ------------------ the iterator could be used here instead
   |
help: take the original Iterator's count instead of collecting it and finding the length
   |
LL ~         
LL ~         sample.iter().count()
   |

error: avoid using `collect()` when not needed
  --> $DIR/needless_collect_indirect.rs:63:57
   |
LL |         let indirect_len: LinkedList<_> = sample.iter().collect();
   |                                                         ^^^^^^^
LL |         indirect_len.len()
   |         ------------------ the iterator could be used here instead
   |
help: take the original Iterator's count instead of collecting it and finding the length
   |
LL ~         
LL ~         sample.iter().count()
   |

error: avoid using `collect()` when not needed
  --> $DIR/needless_collect_indirect.rs:68:57
   |
LL |         let indirect_len: BinaryHeap<_> = sample.iter().collect();
   |                                                         ^^^^^^^
LL |         indirect_len.len()
   |         ------------------ the iterator could be used here instead
   |
help: take the original Iterator's count instead of collecting it and finding the length
   |
LL ~         
LL ~         sample.iter().count()
   |

error: aborting due to 9 previous errors

