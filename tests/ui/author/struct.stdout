if_chain! {
    if let ExprKind::Struct(qpath, fields, None) = expr.kind;
    if match_qpath(qpath, &["Test"]);
    if fields.len() == 1;
    if fields[0].ident.as_str() == "field";
    if let ExprKind::Cast(expr1, cast_ty) = fields[0].expr.kind;
    if let TyKind::Path(ref qpath1) = cast_ty.kind;
    if match_qpath(qpath1, &["u32"]);
    if let ExprKind::Lit(ref lit) = expr1.kind;
    if let LitKind::Bool(true) = lit.node;
    then {
        // report your lint here
    }
}
if_chain! {
    if let PatKind::Struct(ref qpath, fields, false) = arm.pat.kind;
    if match_qpath(qpath, &["Test"]);
    if fields.len() == 1;
    if fields[0].ident.as_str() == "field";
    if let PatKind::Lit(lit_expr) = fields[0].pat.kind;
    if let ExprKind::Lit(ref lit) = lit_expr.kind;
    if let LitKind::Int(1, LitIntType::Unsuffixed) = lit.node;
    if arm.guard.is_none();
    if let ExprKind::Block(block, None) = arm.body.kind;
    if block.stmts.is_empty();
    if block.expr.is_none();
    then {
        // report your lint here
    }
}
if_chain! {
    if let PatKind::TupleStruct(ref qpath, fields, None) = arm.pat.kind;
    if match_qpath(qpath, &["TestTuple"]);
    if fields.len() == 1;
    if let PatKind::Lit(lit_expr) = fields[0].kind;
    if let ExprKind::Lit(ref lit) = lit_expr.kind;
    if let LitKind::Int(1, LitIntType::Unsuffixed) = lit.node;
    if arm.guard.is_none();
    if let ExprKind::Block(block, None) = arm.body.kind;
    if block.stmts.is_empty();
    if block.expr.is_none();
    then {
        // report your lint here
    }
}
if_chain! {
    if let ExprKind::MethodCall(method_name, args, _) = expr.kind;
    if method_name.ident.as_str() == "test";
    if args.len() == 1;
    if let ExprKind::Path(ref qpath) = args[0].kind;
    if match_qpath(qpath, &["test_method_call"]);
    then {
        // report your lint here
    }
}
